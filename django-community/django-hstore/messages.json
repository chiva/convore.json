[{"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303948539.2959311, "message": "https://github.com/jordanm/django-hstore", "group_id": 81, "id": 834253}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303948561.289336, "message": "The docs aren't so great yet, but looking at the tests helps a lot.", "group_id": 81, "id": 834256}, {"user_id": 1, "stars": [{"date_created": 1303948938.3132391, "user_id": 209}, {"date_created": 1303981497.8366661, "user_id": 213}], "topic_id": 21726, "date_created": 1303948725.8596139, "message": "This is pretty awesome IMO :)", "group_id": 81, "id": 834283}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303948592.776932, "message": "class DataBag(models.Model):\n    name = models.CharField(max_length=32)\n    data = hstore.DictionaryField(db_index=True)\n    objects = hstore.Manager()\n\n    def __unicode__(self):\n        return self.name", "group_id": 81, "id": 834259}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303948607.2307479, "message": "And here's how you query it back: https://github.com/jordanm/django-hstore/blob/master/tests/tests.py", "group_id": 81, "id": 834260}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303948640.3331611, "message": "r = DataBag.objects.filter(data__contains={'v': bag.data['v']})\nself.assertEqual(len(r), 1)", "group_id": 81, "id": 834263}, {"user_id": 7, "stars": [], "topic_id": 21726, "date_created": 1303949573.1315961, "message": "yes", "group_id": 81, "id": 834420}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303949595.0601189, "message": "@alex how would you do it?", "group_id": 81, "id": 834422}, {"user_id": 7, "stars": [], "topic_id": 21726, "date_created": 1303949628.5124979, "message": "values(\"data__v\")", "group_id": 81, "id": 834429}, {"user_id": 7, "stars": [], "topic_id": 21726, "date_created": 1303949663.8760719, "message": "@zeeg indeed, @jacobian and I discussed implementing this several motnhs ago", "group_id": 81, "id": 834440}, {"user_id": 7, "stars": [], "topic_id": 21726, "date_created": 1303949546.996717, "message": "they're a bad API", "group_id": 81, "id": 834414}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303949562.246851, "message": "Oh, like e.g. DataBag.objects.filter(id=alpha.id).hpeek(attr='data', key='v')", "group_id": 81, "id": 834415}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303948568.6789999, "message": "Here's how you create models that use it: https://github.com/jordanm/django-hstore/blob/master/tests/app/models.py", "group_id": 81, "id": 834257}, {"user_id": 1127, "stars": [], "topic_id": 21726, "date_created": 1303949661.6530831, "message": "@alex trying to figure out how I can do that with django-bitfield and I give up every time", "group_id": 81, "id": 834438}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303949727.8418641, "message": "I dunno, this is pretty workable though", "group_id": 81, "id": 834450}, {"user_id": 7, "stars": [], "topic_id": 21726, "date_created": 1303949515.2161551, "message": "the h* queryset methods", "group_id": 81, "id": 834402}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303949713.2233701, "message": "@alex yeah that would be cool", "group_id": 81, "id": 834449}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303949536.3469169, "message": "@alex what about them?", "group_id": 81, "id": 834409}, {"user_id": 7, "stars": [], "topic_id": 21726, "date_created": 1303949543.4889021, "message": "I don't like them :)", "group_id": 81, "id": 834412}, {"user_id": 1127, "stars": [], "topic_id": 21726, "date_created": 1303949642.436959, "message": "@alex good luck implementing that :)", "group_id": 81, "id": 834433}, {"user_id": 1127, "stars": [], "topic_id": 21726, "date_created": 1303949633.1267281, "message": "It'd be nice if these kinds of things could be done w/o a custom db backend", "group_id": 81, "id": 834430}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303962804.8428459, "message": "@ptone it does", "group_id": 81, "id": 836212}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303962819.7165289, "message": "@ptone It indexes into the hstore column", "group_id": 81, "id": 836216}, {"user_id": 1822, "stars": [], "topic_id": 21726, "date_created": 1303962570.093863, "message": "This doesn't improve the index/search issues that are one of the limitations of json fields though does it?", "group_id": 81, "id": 836153}, {"user_id": 8740, "stars": [], "topic_id": 21726, "date_created": 1303982092.6702631, "message": "these days, we restrict it to just the system's running state, and a few bits of app information", "group_id": 81, "id": 838512}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303981556.4719069, "message": "@jezdez I think I might have found it through seeing you watch it on GitHub", "group_id": 81, "id": 838464}, {"user_id": 8740, "stars": [], "topic_id": 21726, "date_created": 1303981784.666405, "message": "Ah, finally, a better way to use hstore", "group_id": 81, "id": 838482}, {"user_id": 8740, "stars": [], "topic_id": 21726, "date_created": 1303981829.2209511, "message": "I'd been looking at moving some more of ep.io over into postgres, using this might convince me quicker", "group_id": 81, "id": 838484}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303982005.3088181, "message": "@andrewgodwin to postgres from what?", "group_id": 81, "id": 838498}, {"user_id": 213, "stars": [{"date_created": 1303981542.2697229, "user_id": 1}], "topic_id": 21726, "date_created": 1303981492.1917939, "message": "@ericflo Pretty awesome, indeed.", "group_id": 81, "id": 838456}, {"user_id": 1, "stars": [{"date_created": 1304001815.4154091, "user_id": 1916}], "topic_id": 21726, "date_created": 1303982301.3514891, "message": "@andrewgodwin Yeah it's so easy to get started with Redis, you just...put...data into it....and it's there.", "group_id": 81, "id": 838537}, {"user_id": 8740, "stars": [], "topic_id": 21726, "date_created": 1303982019.389401, "message": "@ericflo Redis; we put a little too much information in it", "group_id": 81, "id": 838499}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1303982027.5558519, "message": "@andrewgodwin ahh I see", "group_id": 81, "id": 838500}, {"user_id": 8740, "stars": [], "topic_id": 21726, "date_created": 1303982042.400275, "message": "at first, it had everything, including filesystem images (hey, it was a quick way to get started)", "group_id": 81, "id": 838507}, {"user_id": 8740, "stars": [], "topic_id": 21726, "date_created": 1303982598.1974649, "message": "But it's still really awesome as our runtime state store", "group_id": 81, "id": 838575}, {"user_id": 8740, "stars": [], "topic_id": 21726, "date_created": 1303982585.643543, "message": "@ericflo Exactly. As soon as we noticed we were doing pseudo-range queries or joins, we moved that stuff away", "group_id": 81, "id": 838574}, {"user_id": 1822, "stars": [], "topic_id": 21726, "date_created": 1303989328.1873109, "message": "@ericflo I'm referring to the issue where you can't search or filter easily and discreetly on certain keys when data is stored in combo field whether hstore or json. Not saying it's not awesome in the right place but is subject to some headache if overused.", "group_id": 81, "id": 839145}, {"user_id": 213, "stars": [], "topic_id": 21726, "date_created": 1303993196.9223821, "message": "Just fixed a few issues in my fork", "group_id": 81, "id": 839531}, {"user_id": 213, "stars": [{"date_created": 1304011702.010406, "user_id": 1}], "topic_id": 21726, "date_created": 1303993206.6803219, "message": "runs on Django 1.3 now", "group_id": 81, "id": 839535}, {"user_id": 1, "stars": [], "topic_id": 21726, "date_created": 1304011704.5617199, "message": "@jezdez woot, nice!", "group_id": 81, "id": 844051}]