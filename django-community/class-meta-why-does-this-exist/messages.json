[{"user_id": 6396, "stars": [], "topic_id": 9077, "date_created": 1298648753.814554, "message": "On models and the ModelForm.", "group_id": 81, "id": 208787}, {"user_id": 6396, "stars": [], "topic_id": 9077, "date_created": 1298648801.406126, "message": "A class inside a class. Is it simply for providing a simple namespace within the class?", "group_id": 81, "id": 208800}, {"user_id": 2588, "stars": [], "topic_id": 9077, "date_created": 1298649241.375731, "message": "historically, there used to be an Admin inner class as well, which was dropped when they refactored the admin. admin.py files now replace what the original inner Admin class used to provide", "group_id": 81, "id": 208875}, {"user_id": 6396, "stars": [], "topic_id": 9077, "date_created": 1298648777.2030921, "message": "It's not something I see regularly around the Python world and I can't find much on it.", "group_id": 81, "id": 208792}, {"user_id": 6396, "stars": [], "topic_id": 9077, "date_created": 1298649895.028923, "message": "Yeh, working on a .96 site now. Fun fun.", "group_id": 81, "id": 208990}, {"user_id": 2588, "stars": [], "topic_id": 9077, "date_created": 1298648883.3750751, "message": "I'm guessing that was a major motivation. Otherwise you wouldn't be able to name fields on your Models the same as any of the model options", "group_id": 81, "id": 208822}, {"user_id": 6396, "stars": [], "topic_id": 9077, "date_created": 1298649107.6050439, "message": "@unbracketed Thanks.", "group_id": 81, "id": 208859}, {"user_id": 214, "stars": [{"date_created": 1298673874.4139249, "user_id": 1736}, {"date_created": 1298678259.8157849, "user_id": 3705}], "topic_id": 9077, "date_created": 1298650273.3037059, "message": "It doesn't hurt anything to make your inner Meta class a new-style class. Also doesn't help anything; it's just used as a namespace.", "group_id": 81, "id": 209050}, {"user_id": 6396, "stars": [], "topic_id": 9077, "date_created": 1298648963.775964, "message": "and I take it doesn't use the new-style Python classes because it simply doesn't need? It's certainly less verbose.", "group_id": 81, "id": 208836}, {"user_id": 2588, "stars": [], "topic_id": 9077, "date_created": 1298649068.7969289, "message": "right - it is more of a declarative tool. when Django processes Models it looks for the Meta class and overrides internal Model options based on what you've specified", "group_id": 81, "id": 208855}, {"user_id": 2588, "stars": [], "topic_id": 9077, "date_created": 1298650834.4097159, "message": "One nice consequence is that you can take advantage of inheritance at the Model options level: http://docs.djangoproject.com/en/1.2/topics/db/models/#meta-inheritance", "group_id": 81, "id": 209158}]