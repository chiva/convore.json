[{"user_id": 34360, "stars": [], "topic_id": 48549, "date_created": 1323291870.654057, "message": "Well, it is just a text field, so the sort is working as it should. I think the easiest thing would be to add an additional integer field and populate it on Save by stripping non-numeric characters from it, then sorting by that.", "group_id": 81, "id": 2718768}, {"user_id": 34360, "stars": [], "topic_id": 48549, "date_created": 1323291886.8441479, "message": "The problem is: what will you do with IPv6 addresses? Or does that not matter?", "group_id": 81, "id": 2718769}, {"user_id": 16069, "stars": [], "topic_id": 48549, "date_created": 1323291006.310354, "message": "I have a model that includes an IPAddressField entry, that I then use in an order_by() when creating a particular view.  The problem is that this field sorts alphabetically, not in proper IP address order.  In otherwords, 172.16.1.1, 172.16.1.100, 172.16.1.101, 172.16.1.2 would be the order generated by default rather than 172.16.1.1, 172.16.1.2. 172.16.1.100, etc...", "group_id": 81, "id": 2718710}, {"user_id": 16069, "stars": [], "topic_id": 48549, "date_created": 1323291098.743952, "message": "I have a model that includes an IPAddressField entry, that I then use in an order_by() when creating a particular view.  The problem is that this field sorts alphabetically, not in proper IP address order.  In otherwords, 172.16.1.1, 172.16.1.100, 172.16.1.101, 172.16.1.2 would be the order generated by default rather than 172.16.1.1, 172.16.1.2. 172.16.1.100, etc...", "group_id": 81, "id": 2718719}, {"user_id": 16069, "stars": [], "topic_id": 48549, "date_created": 1323291135.1666329, "message": "Is there a straightforward way to fix how order_by works on this field type?", "group_id": 81, "id": 2718722}, {"user_id": 34360, "stars": [], "topic_id": 48549, "date_created": 1323291988.1320109, "message": "Alternatively, if it's a small amount of data, you could treat the queryset as a normal set and apply a sort on that field with a lambda function to strip the periods.", "group_id": 81, "id": 2718784}, {"user_id": 3354, "stars": [], "topic_id": 48549, "date_created": 1323321012.1989851, "message": "Stripping the periods alone won't help - the component parts are variable-length for onw thing.", "group_id": 81, "id": 2721196}, {"user_id": 11592, "stars": [], "topic_id": 48549, "date_created": 1323329740.0105829, "message": "use something like \".\".join(x.rjust(3, '0') for x in ip.split('.')) before saving value. Optionally, augment your IPAddressField with a something like lambda(value: \".\".join(x.lstrip('0') for x in value.split('.'))", "group_id": 81, "id": 2721673}, {"user_id": 30035, "stars": [], "topic_id": 48549, "date_created": 1323332667.9829881, "message": "from socket import inet_aton, inet_ntoa\nfrom struct import pack, unpack\n\nip_int = unpack('I', inet_aton(ip_str))[0]\nip_str = inet_ntoa(pack('I', ip_int))", "group_id": 81, "id": 2721802}, {"user_id": 30035, "stars": [], "topic_id": 48549, "date_created": 1323332767.500092, "message": "err, that was supposed to be \"use inet_pton/inet_ntop\"", "group_id": 81, "id": 2721808}, {"user_id": 30035, "stars": [{"date_created": 1323593866.8393469, "user_id": 13300}, {"date_created": 1323613683.8121209, "user_id": 927}], "topic_id": 48549, "date_created": 1323332610.018189, "message": "Remember that the way we write an IPv4 address is just a human notation for four bytes. Internally, they're really just a 32-bit unsigned integer. Store them that way and you won't have any sorting problems - only format them back to the dotted-quad notation for display.\nConversions are easy - something like this (didn't test it thoroughly, but I think it's right. And btw, if you need IPv6 support, use inet_pton/inet_aton, and your pack string would be different, too (because the bit length is different).", "group_id": 81, "id": 2721798}, {"user_id": 16069, "stars": [], "topic_id": 48549, "date_created": 1323368303.9319861, "message": "Thanks for the suggestions.  Given that DJango had some understanding of an IPAddress (and even validation of same) I'd wondered if there was an option to sort correctly, and if so...didn't want to duplicate the work.  I like the idea of stripping the value down into an integer and sorting on that.", "group_id": 81, "id": 2724116}]