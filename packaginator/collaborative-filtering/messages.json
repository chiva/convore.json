[{"user_id": 1822, "stars": [], "topic_id": 19471, "date_created": 1302808501.543412, "message": "So I was thinking about how to build some of this into packaginator, and came up with something that works well enough with the ORM, and if cached may not be too bad in the scheme of things, but was still wondering if someone with more SQL-Fu could translate this into raw SQL for performance:\nhttp://dpaste.de/GXBW/", "group_id": 7079, "id": 688954}, {"user_id": 1822, "stars": [], "topic_id": 19471, "date_created": 1302808581.937592, "message": "This algorithm completes the phrase: \"Users who use this package, also use:\"\n\nsee also: http://en.wikipedia.org/wiki/Collaborative_filtering", "group_id": 7079, "id": 688984}, {"user_id": 1822, "stars": [], "topic_id": 19471, "date_created": 1302815113.338486, "message": "I'm pretty sure that sql is the only way to do that in one step, that the ORM isn't capable alone.", "group_id": 7079, "id": 690986}, {"user_id": 27916, "stars": [{"date_created": 1302815048.1159711, "user_id": 1822}], "topic_id": 19471, "date_created": 1302814756.707777, "message": "How's this? It's using all indexes on my machine and not too terrible\n\nSELECT PACKAGE.slug,\n       count ( * ) AS count\n  FROM package_package_usage usage\n INNER JOIN package_package package\n    ON usage.package_id = package.id,\n    /* related */\n       package_package_usage u\n INNER JOIN package_package p\n    ON U.PACKAGE_id = p.id\n WHERE usage.user_id = u.user_id\n   AND p.slug = 'django-registration'\n   AND package.slug <> p.slug\n GROUP BY package.slug\n ORDER BY count DESC\n LIMIT 10;", "group_id": 7079, "id": 690866}, {"user_id": 27916, "stars": [{"date_created": 1302815049.085279, "user_id": 1822}, {"date_created": 1302904434.6123359, "user_id": 28529}], "topic_id": 19471, "date_created": 1302814881.917563, "message": "Yuck, lost my formatting. http://dpaste.de/wED0/", "group_id": 7079, "id": 690903}, {"user_id": 27916, "stars": [], "topic_id": 19471, "date_created": 1302815558.4849701, "message": "yeah, the orm-way would break down pretty quick", "group_id": 7079, "id": 691121}, {"user_id": 1822, "stars": [], "topic_id": 19471, "date_created": 1302814951.4171059, "message": "yup - that seems to work - now if only I could understand it ;-)", "group_id": 7079, "id": 690921}, {"user_id": 27916, "stars": [{"date_created": 1302816119.9660561, "user_id": 1822}, {"date_created": 1302904429.310786, "user_id": 28529}], "topic_id": 19471, "date_created": 1302816074.342907, "message": "something like: http://dpaste.de/Jw6x/", "group_id": 7079, "id": 691219}, {"user_id": 1822, "stars": [], "topic_id": 19471, "date_created": 1302815708.1428051, "message": "now since this is on a non-explicit join built into the many2many field, I'm wondering how to inject your magical incantation into a Package.objects.raw, or package_instance.usage.raw", "group_id": 7079, "id": 691148}, {"user_id": 1822, "stars": [], "topic_id": 19471, "date_created": 1302816127.044075, "message": "the sql-fu is strong in this one", "group_id": 7079, "id": 691239}, {"user_id": 27916, "stars": [], "topic_id": 19471, "date_created": 1302816131.5117469, "message": ":-)", "group_id": 7079, "id": 691241}, {"user_id": 27916, "stars": [], "topic_id": 19471, "date_created": 1302815994.439404, "message": "not sure. if the result isn't a model, i think you have to use the cursor directly? Like: http://docs.djangoproject.com/en/dev/topics/db/sql/#executing-custom-sql-directly", "group_id": 7079, "id": 691198}, {"user_id": 1822, "stars": [], "topic_id": 19471, "date_created": 1302819694.423234, "message": "alright - I modified the query a bit to use id instead of slug where appropriate, and fetched a bit more data - integrated into model and template:\nhttps://github.com/ptone/packaginator/compare/master...similar-usage", "group_id": 7079, "id": 691911}, {"user_id": 1822, "stars": [], "topic_id": 19471, "date_created": 1302819830.090904, "message": "needs some css love for the width of the first column", "group_id": 7079, "id": 691918}, {"user_id": 27916, "stars": [], "topic_id": 19471, "date_created": 1302820403.600111, "message": "hm, using sqllite? that'll blow up on postgres. try changing the group by to \"GROUP BY 1, 2, 3\" instead", "group_id": 7079, "id": 692015}, {"user_id": 1822, "stars": [], "topic_id": 19471, "date_created": 1302825370.5212269, "message": "thanks, done - testing this will be a bitch until we have a good test fixture generator in place, @pydanny - what do you recommend here?", "group_id": 7079, "id": 692625}, {"user_id": 1822, "stars": [], "topic_id": 19471, "date_created": 1302826464.4110711, "message": "So I think that this will actually be more useful in something like Python packages, where the usage may be more diverse.  In Django there are like the top 10 apps that everyone uses and show up in most lists.", "group_id": 7079, "id": 692750}, {"user_id": 1398, "stars": [], "topic_id": 19471, "date_created": 1302830035.5819371, "message": "I'm discovering that relying on JSON fixtures is agony in major refactors. So I'm converting fixtures in established projects to ORM calls. A little more work now but a lot of sanity preserved in the long run", "group_id": 7079, "id": 693146}]