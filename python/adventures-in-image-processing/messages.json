[{"user_id": 927, "stars": [], "topic_id": 7557, "date_created": 1298167786.292901, "message": "Besides confirming that it's rare to get pure wins on performance (e.g. GraphicsMagick is about 2x faster *or* slower than PIL depending on the source format) it seems like we'd benefit from having something like a DB-API for images which would make switching backends more like switching databases", "group_id": 292, "id": 151836}, {"user_id": 927, "stars": [], "topic_id": 7557, "date_created": 1298167985.2529571, "message": "and it'd be interesting to experiment with something like a pure-Python collection (PyPNG, maybe some equivalent for JPEG?) both for platforms like appengine or to see what the penalty is like for using PyPy", "group_id": 292, "id": 151844}, {"user_id": 927, "stars": [{"date_created": 1298182762.6426351, "user_id": 8}], "topic_id": 7557, "date_created": 1298167451.3129699, "message": "PIL is handy but I've been running into limitations a bit recently with performance and codec support (for some reason we use a lot of JPEG-2000 at work). Lately I've been playing around with using Other People's Code to see how far that goes for common needs - in my case usually a Django ImageField or simple crop/resize is all we're using - and collecting it into https://github.com/acdha/NativeImaging", "group_id": 292, "id": 151821}, {"user_id": 927, "stars": [], "topic_id": 7557, "date_created": 1298168000.2540269, "message": "Is anyone else working in this area?", "group_id": 292, "id": 151846}, {"user_id": 7, "stars": [], "topic_id": 7557, "date_created": 1298168019.430177, "message": "If you write a pure python image lib, using the array module for internal representation PyPy will be blazing fast on it :)", "group_id": 292, "id": 151849}, {"user_id": 7, "stars": [], "topic_id": 7557, "date_created": 1298170588.6374061, "message": "@acdha that's not nearly fast enough, can you make a benchmark out of it?", "group_id": 292, "id": 151927}, {"user_id": 927, "stars": [], "topic_id": 7557, "date_created": 1298170508.6288781, "message": "That's definitely an interesting idea: I did a quick test with PyPNG and found that pypy can transcode a 2.8MB PNG in 5.6s vs. 7.3s for CPython 2.6, so there's clearly a lot of work which could be done there.", "group_id": 292, "id": 151919}, {"user_id": 927, "stars": [], "topic_id": 7557, "date_created": 1298170525.5097239, "message": "Of course I needed more projects\u2026", "group_id": 292, "id": 151920}, {"user_id": 222, "stars": [], "topic_id": 7557, "date_created": 1298174325.388489, "message": "The last time I needed support for a new image format, I wrote the code, and contributed it to PIL. Maybe you should just do that. You could also contribute performance enhancements. Of course, a collection of pure Python routines would also be useful for PyPy, but maybe not exactly practical today.", "group_id": 292, "id": 152102}, {"user_id": 1822, "stars": [], "topic_id": 7557, "date_created": 1298183471.113203, "message": "@acdha how many cores on your machines?  I've had great results using multiprocessing: http://ptone.com/dablog/2010/01/pythonmultiprocessinghyperthreading-and-image-resizing/", "group_id": 292, "id": 152420}, {"user_id": 8, "stars": [], "topic_id": 7557, "date_created": 1298182813.969532, "message": "this is cool. we use PIL to bake hundreds of thousands of PNG tiles and I'd be wild for a faster alternative.", "group_id": 292, "id": 152417}, {"user_id": 927, "stars": [], "topic_id": 7557, "date_created": 1298210834.5229061, "message": "@alex I was thinking about that - it'd be a great datapoint for speed.pypyp.org", "group_id": 292, "id": 153593}, {"user_id": 927, "stars": [], "topic_id": 7557, "date_created": 1298211069.674515, "message": "@ptone We're using multiprocessing; the main thing is that we process a lot of data (tons of 50-100MB TIFF files) and it ends up spending 98% of the total execution time on one line in Imaging/Antialias.c. That code is a bit convoluted because it handles all of the possible formats in a big nested chunk of logic - I've been thinking about breaking the common case path out into a separate function which would be friendlier with GCC's tree vecotorizer", "group_id": 292, "id": 153609}, {"user_id": 927, "stars": [], "topic_id": 7557, "date_created": 1298211117.6153049, "message": "Contributing a JPEG-2000 codec seems a bit tricky - we'd have to pay a license just to get a copy of the spec - but that's a separate issue", "group_id": 292, "id": 153612}, {"user_id": 1822, "stars": [], "topic_id": 7557, "date_created": 1298213580.972101, "message": "@acdha you're in deeper than I like to be ;-)", "group_id": 292, "id": 153669}, {"user_id": 927, "stars": [], "topic_id": 7557, "date_created": 1298214575.1089511, "message": "@ptone Not sure how happy I am about that either ;)", "group_id": 292, "id": 153716}, {"user_id": 927, "stars": [], "topic_id": 7557, "date_created": 1298214615.320472, "message": "The bad news is that it's playing catchup - Apple's CoreImage or e.g. the AWARE JP2 library are a LOT faster", "group_id": 292, "id": 153719}, {"user_id": 927, "stars": [], "topic_id": 7557, "date_created": 1298214595.350867, "message": "The good news is that this could benefit a lot of people", "group_id": 292, "id": 153717}]