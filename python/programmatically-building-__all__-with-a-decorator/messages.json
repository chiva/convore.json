[{"user_id": 18539, "stars": [], "topic_id": 15078, "date_created": 1301007866.0929379, "message": "__all__, exposed = publicAPI()\n\n@exposed\ndef function():\n    \"\"\"\n    I am an exposed function. Yippee!\n    \"\"\"\n\nassert \"function\" in __all__\n\n@exposed\nclass Class(object):\n    \"\"\"\n    I am an exposed class. Yippee!\n    \"\"\"\n\nassert \"Class\" in __all__", "group_id": 292, "id": 432413}, {"user_id": 20326, "stars": [{"date_created": 1301009997.1965129, "user_id": 1736}], "topic_id": 15078, "date_created": 1301007980.607651, "message": "No, the preferred definition of __all__ is http://code.activestate.com/recipes/577237", "group_id": 292, "id": 432434}, {"user_id": 18571, "stars": [], "topic_id": 15078, "date_created": 1301007626.9707849, "message": "What actually uses __all__ statically? Django?", "group_id": 292, "id": 432370}, {"user_id": 18539, "stars": [], "topic_id": 15078, "date_created": 1301007348.4282229, "message": "def publicAPI():\n    \"\"\"\n    Utility function for neatly exposing a public API through ``__all__``.\n    \"\"\"\n    __all__ = []\n\n    def exposed(publicNamedObject):\n        \"\"\"\n        Expose a named object as public API in ``__all__``.\n        \"\"\"\n        __all__.append(publicNamedObject.__name__)\n        return publicNamedObject\n\n    return __all__, exposed\n", "group_id": 292, "id": 432301}, {"user_id": 18539, "stars": [], "topic_id": 15078, "date_created": 1301007690.167135, "message": "pydoctor, too", "group_id": 292, "id": 432382}, {"user_id": 18539, "stars": [], "topic_id": 15078, "date_created": 1301007898.695148, "message": "Sphinx imports the module, epydoc can apparently do both, so it's mostly just pydoctor that chokes.", "group_id": 292, "id": 432418}, {"user_id": 18571, "stars": [], "topic_id": 15078, "date_created": 1301008516.222131, "message": "Just when we thought it couldn't get worse. I'm gonna be weeping blood for the rest of the afternoon now. :T", "group_id": 292, "id": 432525}, {"user_id": 18539, "stars": [], "topic_id": 15078, "date_created": 1301007407.6071601, "message": "Good or bad? Good: no hacks, maybe people will actually use __all__, definition of exposed/not exposed close to the actual thing, bad: it doesn't actually work if your tool tries to figure out what __all__ is through static inspection.", "group_id": 292, "id": 432323}, {"user_id": 18539, "stars": [], "topic_id": 15078, "date_created": 1301007877.1315579, "message": "In case it wasn't blindingly obvious how it worked :)", "group_id": 292, "id": 432415}, {"user_id": 24490, "stars": [], "topic_id": 15078, "date_created": 1301090552.896225, "message": "pyflakes uses __all__ too", "group_id": 292, "id": 442865}, {"user_id": 18539, "stars": [], "topic_id": 15078, "date_created": 1301096699.259259, "message": "@jonathanj Does it do static inspection though", "group_id": 292, "id": 443352}, {"user_id": 24439, "stars": [], "topic_id": 15078, "date_created": 1301109138.2996111, "message": "@lvh yes, pyflakes is all static", "group_id": 292, "id": 444382}, {"user_id": 2313, "stars": [{"date_created": 1303131433.7163529, "user_id": 8391}], "topic_id": 15078, "date_created": 1301170530.6469159, "message": "I think the solution is nice but decorating classes is only possible in >2.6 which is kind of annoying if you want to support 2.5", "group_id": 292, "id": 447430}]