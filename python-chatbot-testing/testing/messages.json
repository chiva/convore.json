[{"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302294896.6745441, "message": "/help", "group_id": 8628, "id": 595742}, {"user_id": 1284, "stars": [{"date_created": 1302281959.6600111, "user_id": 1284}, {"date_created": 1302282344.799577, "user_id": 28212}], "topic_id": 18115, "date_created": 1302281833.501348, "message": "+++++++++++++++++++++++++++++++++++++++++++++++++++++++", "group_id": 8628, "id": 592736}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302282710.1832831, "message": "again", "group_id": 8628, "id": 592944}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302282741.2141731, "message": "testing", "group_id": 8628, "id": 592954}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302282674.4821441, "message": "a message", "group_id": 8628, "id": 592931}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302282991.6222849, "message": "heyo", "group_id": 8628, "id": 593031}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302282997.775553, "message": "noises?", "group_id": 8628, "id": 593033}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302283130.9715071, "message": "bananas", "group_id": 8628, "id": 593067}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302286598.5841429, "message": "/help dir", "group_id": 8628, "id": 593880}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302286649.2199631, "message": "/help dir", "group_id": 8628, "id": 593889}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302286281.3489649, "message": "/help dir", "group_id": 8628, "id": 593811}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302287571.0048039, "message": "/help dir", "group_id": 8628, "id": 594093}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302285923.0830309, "message": "/help dir", "group_id": 8628, "id": 593699}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302286131.9706759, "message": "/help dir", "group_id": 8628, "id": 593762}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302286040.033402, "message": "/help dir", "group_id": 8628, "id": 593739}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302286173.7092371, "message": "/help dir", "group_id": 8628, "id": 593774}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302287914.89031, "message": "/help dir", "group_id": 8628, "id": 594193}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302288117.6164651, "message": "/help dir", "group_id": 8628, "id": 594240}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302286542.4809201, "message": "/help dir", "group_id": 8628, "id": 593872}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302286565.5749309, "message": "/help dir", "group_id": 8628, "id": 593876}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302288708.933413, "message": "/help dir", "group_id": 8628, "id": 594377}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302288096.213954, "message": "/help dir", "group_id": 8628, "id": 594235}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302288798.015919, "message": "/help dir", "group_id": 8628, "id": 594405}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302288323.76688, "message": "/help dir", "group_id": 8628, "id": 594284}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302287858.522963, "message": "/help dir", "group_id": 8628, "id": 594175}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302288271.854059, "message": "/help dir", "group_id": 8628, "id": 594277}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302288730.8655441, "message": "/help dir", "group_id": 8628, "id": 594384}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302289669.169981, "message": "/help dir", "group_id": 8628, "id": 594658}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302290798.4859841, "message": "testing", "group_id": 8628, "id": 594973}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302291609.841466, "message": "/help os.path.join", "group_id": 8628, "id": 595148}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302290882.748256, "message": "/help dir", "group_id": 8628, "id": 595007}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302290883.5779221, "message": "dir([object]) -> list of strings\n\nIf called without an argument, return the names in the current scope.\nElse, return an alphabetized list of names comprising (some of) the attributes\nof the given object, and of attributes reachable from it.\nIf the object supplies a method named __dir__, it will be used; otherwise\nthe default dir() logic is used and returns:\n  for a module object: the module's attributes.\n  for a class object:  its attributes, and recursively the attributes\n    of its bases.\n  for any other object: its attributes, its class's attributes, and\n    recursively the attributes of its class's base classes.", "group_id": 8628, "id": 595008}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302292091.0673189, "message": "/help os.path.join", "group_id": 8628, "id": 595253}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302291610.705472, "message": "unicode(string [, encoding[, errors]]) -> object\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", "group_id": 8628, "id": 595149}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302291624.0610809, "message": "unicode(string [, encoding[, errors]]) -> object\n\nCreate a new Unicode object from the given encoded string.\nencoding defaults to the current default string encoding.\nerrors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.", "group_id": 8628, "id": 595153}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302292092.3236351, "message": "Python Library Documentation: unicode object\n\nclass u\bun\bni\bic\bco\bod\bde\be(basestring)\n |  unicode(string [, encoding[, errors]]) -> object\n |  \n |  Create a new Unicode object from the given encoded string.\n |  encoding defaults to the current default string encoding.\n |  errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\n |  \n |  Method resolution order:\n |      unicode\n |      basestring\n |      object\n |  \n |  Methods defined here:\n |  \n |  _\b__\b_a\bad\bdd\bd_\b__\b_(...)\n |      x.__add__(y) <==> x+y\n |  \n |  _\b__\b_c\bco\bon\bnt\bta\bai\bin\bns\bs_\b__\b_(...)\n |      x.__contains__(y) <==> y in x\n |  \n |  _\b__\b_e\beq\bq_\b__\b_(...)\n |      x.__eq__(y) <==> x==y\n |  \n |  _\b__\b_f\bfo\bor\brm\bma\bat\bt_\b__\b_(...)\n |      S.__format__(format_spec) -> unicode\n |      \n |      Return a formatted version of S as described by format_spec.\n |  \n |  _\b__\b_g\bge\be_\b__\b_(...)\n |      x.__ge__(y) <==> x>=y\n |  \n |  _\b__\b_g\bge\bet\bta\bat\btt\btr\bri\bib\bbu\but\bte\be_\b__\b_(...)\n |      x.__getattribute__('name') <==> x.name\n |  \n |  _\b__\b_g\bge\bet\bti\bit\bte\bem\bm_\b__\b_(...)\n |      x.__getitem__(y) <==> x[y]\n |  \n |  _\b__\b_g\bge\bet\btn\bne\bew\bwa\bar\brg\bgs\bs_\b__\b_(...)\n |  \n |  _\b__\b_g\bge\bet\bts\bsl\bli\bic\bce\be_\b__\b_(...)\n |      x.__getslice__(i, j) <==> x[i:j]\n |      \n |      Use of negative indices is not supported.\n |  \n |  _\b__\b_g\bgt\bt_\b__\b_(...)\n |      x.__gt__(y) <==> x>y\n |  \n |  _\b__\b_h\bha\bas\bsh\bh_\b__\b_(...)\n |      x.__hash__() <==> hash(x)\n |  \n |  _\b__\b_l\ble\be_\b__\b_(...)\n |      x.__le__(y) <==> x<=y\n |  \n |  _\b__\b_l\ble\ben\bn_\b__\b_(...)\n |      x.__len__() <==> len(x)\n |  \n |  _\b__\b_l\blt\bt_\b__\b_(...)\n |      x.__lt__(y) <==> x<y\n |  \n |  _\b__\b_m\bmo\bod\bd_\b__\b_(...)\n |      x.__mod__(y) <==> x%y\n |  \n |  _\b__\b_m\bmu\bul\bl_\b__\b_(...)\n |      x.__mul__(n) <==> x*n\n |  \n |  _\b__\b_n\bne\be_\b__\b_(...)\n |      x.__ne__(y) <==> x!=y\n |  \n |  _\b__\b_r\bre\bep\bpr\br_\b__\b_(...)\n |      x.__repr__() <==> repr(x)\n |  \n |  _\b__\b_r\brm\bmo\bod\bd_\b__\b_(...)\n |      x.__rmod__(y) <==> y%x\n |  \n |  _\b__\b_r\brm\bmu\bul\bl_\b__\b_(...)\n |      x.__rmul__(n) <==> n*x\n |  \n |  _\b__\b_s\bsi\biz\bze\beo\bof\bf_\b__\b_(...)\n |      S.__sizeof__() -> size of S in memory, in bytes\n |  \n |  _\b__\b_s\bst\btr\br_\b__\b_(...)\n |      x.__str__() <==> str(x)\n |  \n |  c\bca\bap\bpi\bit\bta\bal\bli\biz\bze\be(...)\n |      S.capitalize() -> unicode\n |      \n |      Return a capitalized version of S, i.e. make the first character\n |      have upper case and the rest lower case.\n |  \n |  c\bce\ben\bnt\bte\ber\br(...)\n |      S.center(width[, fillchar]) -> unicode\n |      \n |      Return S centered in a Unicode string of length width. Padding is\n |      done using the specified fill character (default is a space)\n |  \n |  c\bco\bou\bun\bnt\bt(...)\n |      S.count(sub[, start[, end]]) -> int\n |      \n |      Return the number of non-overlapping occurrences of substring sub in\n |      Unicode string S[start:end].  Optional arguments start and end are\n |      interpreted as in slice notation.\n |  \n |  d\bde\bec\bco\bod\bde\be(...)\n |      S.decode([encoding[,errors]]) -> string or unicode\n |      \n |      Decodes S using the codec registered for encoding. encoding defaults\n |      to the default encoding. errors may be given to set a different error\n |      handling scheme. Default is 'strict' meaning that encoding errors raise\n |      a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'\n |      as well as any other name registerd with codecs.register_error that is\n |      able to handle UnicodeDecodeErrors.\n |  \n |  e\ben\bnc\bco\bod\bde\be(...)\n |      S.encode([encoding[,errors]]) -> string or unicode\n |      \n |      Encodes S using the codec registered for encoding. encoding defaults\n |      to the default encoding. errors may be given to set a different error\n |      handling scheme. Default is 'strict' meaning that encoding errors raise\n |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and\n |      'xmlcharrefreplace' as well as any other name registered with\n |      codecs.register_error that can handle UnicodeEncodeErrors.\n |  \n |  e\ben\bnd\bds\bsw\bwi\bit\bth\bh(...)\n |      S.endswith(suffix[, start[, end]]) -> bool\n |      \n |      Return True if S ends with the specified suffix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      suffix can also be a tuple of strings to try.\n |  \n |  e\bex\bxp\bpa\ban\bnd\bdt\bta\bab\bbs\bs(...)\n |      S.expandtabs([tabsize]) -> unicode\n |      \n |      Return a copy of S where all tab characters are expanded using spaces.\n |      If tabsize is not given, a tab size of 8 characters is assumed.\n |  \n |  f\bfi\bin\bnd\bd(...)\n |      S.find(sub [,start [,end]]) -> int\n |      \n |      Return the lowest index in S where substring sub is found,\n |      such that sub is contained within s[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  f\bfo\bor\brm\bma\bat\bt(...)\n |      S.format(*args, **kwargs) -> unicode\n |      \n |      Return a formatted version of S, using substitutions from args and kwargs.\n |      The substitutions are identified by braces ('{' and '}').\n |  \n |  i\bin\bnd\bde\bex\bx(...)\n |      S.index(sub [,start [,end]]) -> int\n |      \n |      Like S.find() but raise ValueError when the substring is not found.\n |  \n |  i\bis\bsa\bal\bln\bnu\bum\bm(...)\n |      S.isalnum() -> bool\n |      \n |      Return True if all characters in S are alphanumeric\n |      and there is at least one character in S, False otherwise.\n |  \n |  i\bis\bsa\bal\blp\bph\bha\ba(...)\n |      S.isalpha() -> bool\n |      \n |      Return True if all characters in S are alphabetic\n |      and there is at least one character in S, False otherwise.\n |  \n |  i\bis\bsd\bde\bec\bci\bim\bma\bal\bl(...)\n |      S.isdecimal() -> bool\n |      \n |      Return True if there are only decimal characters in S,\n |      False otherwise.\n |  \n |  i\bis\bsd\bdi\big\bgi\bit\bt(...)\n |      S.isdigit() -> bool\n |      \n |      Return True if all characters in S are digits\n |      and there is at least one character in S, False otherwise.\n |  \n |  i\bis\bsl\blo\bow\bwe\ber\br(...)\n |      S.islower() -> bool\n |      \n |      Return True if all cased characters in S are lowercase and there is\n |      at least one cased character in S, False otherwise.\n |  \n |  i\bis\bsn\bnu\bum\bme\ber\bri\bic\bc(...)\n |      S.isnumeric() -> bool\n |      \n |      Return True if there are only numeric characters in S,\n |      False otherwise.\n |  \n |  i\bis\bss\bsp\bpa\bac\bce\be(...)\n |      S.isspace() -> bool\n |      \n |      Return True if all characters in S are whitespace\n |      and there is at least one character in S, False otherwise.\n |  \n |  i\bis\bst\bti\bit\btl\ble\be(...)\n |      S.istitle() -> bool\n |      \n |      Return True if S is a titlecased string and there is at least one\n |      character in S, i.e. upper- and titlecase characters may only\n |      follow uncased characters and lowercase characters only cased ones.\n |      Return False otherwise.\n |  \n |  i\bis\bsu\bup\bpp\bpe\ber\br(...)\n |      S.isupper() -> bool\n |      \n |      Return True if all cased characters in S are uppercase and there is\n |      at least one cased character in S, False otherwise.\n |  \n |  j\bjo\boi\bin\bn(...)\n |      S.join(iterable) -> unicode\n |      \n |      Return a string which is the concatenation of the strings in the\n |      iterable.  The separator between elements is S.\n |  \n |  l\blj\bju\bus\bst\bt(...)\n |      S.ljust(width[, fillchar]) -> int\n |      \n |      Return S left-justified in a Unicode string of length width. Padding is\n |      done using the specified fill character (default is a space).\n |  \n |  l\blo\bow\bwe\ber\br(...)\n |      S.lower() -> unicode\n |      \n |      Return a copy of the string S converted to lowercase.\n |  \n |  l\bls\bst\btr\bri\bip\bp(...)\n |      S.lstrip([chars]) -> unicode\n |      \n |      Return a copy of the string S with leading whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is a str, it will be converted to unicode before stripping\n |  \n |  p\bpa\bar\brt\bti\bit\bti\bio\bon\bn(...)\n |      S.partition(sep) -> (head, sep, tail)\n |      \n |      Search for the separator sep in S, and return the part before it,\n |      the separator itself, and the part after it.  If the separator is not\n |      found, return S and two empty strings.\n |  \n |  r\bre\bep\bpl\bla\bac\bce\be(...)\n |      S.replace(old, new[, count]) -> unicode\n |      \n |      Return a copy of S with all occurrences of substring\n |      old replaced by new.  If the optional argument count is\n |      given, only the first count occurrences are replaced.\n |  \n |  r\brf\bfi\bin\bnd\bd(...)\n |      S.rfind(sub [,start [,end]]) -> int\n |      \n |      Return the highest index in S where substring sub is found,\n |      such that sub is contained within s[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  r\bri\bin\bnd\bde\bex\bx(...)\n |      S.rindex(sub [,start [,end]]) -> int\n |      \n |      Like S.rfind() but raise ValueError when the substring is not found.\n |  \n |  r\brj\bju\bus\bst\bt(...)\n |      S.rjust(width[, fillchar]) -> unicode\n |      \n |      Return S right-justified in a Unicode string of length width. Padding is\n |      done using the specified fill character (default is a space).\n |  \n |  r\brp\bpa\bar\brt\bti\bit\bti\bio\bon\bn(...)\n |      S.rpartition(sep) -> (head, sep, tail)\n |      \n |      Search for the separator sep in S, starting at the end of S, and return\n |      the part before it, the separator itself, and the part after it.  If the\n |      separator is not found, return two empty strings and S.\n |  \n |  r\brs\bsp\bpl\bli\bit\bt(...)\n |      S.rsplit([sep [,maxsplit]]) -> list of strings\n |      \n |      Return a list of the words in S, using sep as the\n |      delimiter string, starting at the end of the string and\n |      working to the front.  If maxsplit is given, at most maxsplit\n |      splits are done. If sep is not specified, any whitespace string\n |      is a separator.\n |  \n |  r\brs\bst\btr\bri\bip\bp(...)\n |      S.rstrip([chars]) -> unicode\n |      \n |      Return a copy of the string S with trailing whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is a str, it will be converted to unicode before stripping\n |  \n |  s\bsp\bpl\bli\bit\bt(...)\n |      S.split([sep [,maxsplit]]) -> list of strings\n |      \n |      Return a list of the words in S, using sep as the\n |      delimiter string.  If maxsplit is given, at most maxsplit\n |      splits are done. If sep is not specified or is None, any\n |      whitespace string is a separator and empty strings are\n |      removed from the result.\n |  \n |  s\bsp\bpl\bli\bit\btl\bli\bin\bne\bes\bs(...)\n |      S.splitlines([keepends]) -> list of strings\n |      \n |      Return a list of the lines in S, breaking at line boundaries.\n |      Line breaks are not included in the resulting list unless keepends\n |      is given and true.\n |  \n |  s\bst\bta\bar\brt\bts\bsw\bwi\bit\bth\bh(...)\n |      S.startswith(prefix[, start[, end]]) -> bool\n |      \n |      Return True if S starts with the specified prefix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      prefix can also be a tuple of strings to try.\n |  \n |  s\bst\btr\bri\bip\bp(...)\n |      S.strip([chars]) -> unicode\n |      \n |      Return a copy of the string S with leading and trailing\n |      whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is a str, it will be converted to unicode before stripping\n |  \n |  s\bsw\bwa\bap\bpc\bca\bas\bse\be(...)\n |      S.swapcase() -> unicode\n |      \n |      Return a copy of S with uppercase characters converted to lowercase\n |      and vice versa.\n |  \n |  t\bti\bit\btl\ble\be(...)\n |      S.title() -> unicode\n |      \n |      Return a titlecased version of S, i.e. words start with title case\n |      characters, all remaining cased characters have lower case.\n |  \n |  t\btr\bra\ban\bns\bsl\bla\bat\bte\be(...)\n |      S.translate(table) -> unicode\n |      \n |      Return a copy of the string S, where all characters have been mapped\n |      through the given translation table, which must be a mapping of\n |      Unicode ordinals to Unicode ordinals, Unicode strings or None.\n |      Unmapped characters are left untouched. Characters mapped to None\n |      are deleted.\n |  \n |  u\bup\bpp\bpe\ber\br(...)\n |      S.upper() -> unicode\n |      \n |      Return a copy of S converted to uppercase.\n |  \n |  z\bzf\bfi\bil\bll\bl(...)\n |      S.zfill(width) -> unicode\n |      \n |      Pad a numeric string S with zeros on the left, to fill a field\n |      of the specified width. The string S is never truncated.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  _\b__\b_n\bne\bew\bw_\b__\b_ = <built-in method __new__ of type object>\n |      T.__new__(S, ...) -> a new object with type S, a subtype of T", "group_id": 8628, "id": 595255}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302292682.7117951, "message": "/help os.path.join", "group_id": 8628, "id": 595377}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302292056.811239, "message": "/help os.path.join", "group_id": 8628, "id": 595235}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302292661.38954, "message": "/help os.path.join", "group_id": 8628, "id": 595370}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302291622.895905, "message": "/help requests", "group_id": 8628, "id": 595152}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302292057.8113699, "message": "Python Library Documentation: tuple object\n\nclass t\btu\bup\bpl\ble\be(object)\n |  tuple() -> empty tuple\n |  tuple(iterable) -> tuple initialized from iterable's items\n |  \n |  If the argument is a tuple, the return value is the same object.\n |  \n |  Methods defined here:\n |  \n |  _\b__\b_a\bad\bdd\bd_\b__\b_(...)\n |      x.__add__(y) <==> x+y\n |  \n |  _\b__\b_c\bco\bon\bnt\bta\bai\bin\bns\bs_\b__\b_(...)\n |      x.__contains__(y) <==> y in x\n |  \n |  _\b__\b_e\beq\bq_\b__\b_(...)\n |      x.__eq__(y) <==> x==y\n |  \n |  _\b__\b_g\bge\be_\b__\b_(...)\n |      x.__ge__(y) <==> x>=y\n |  \n |  _\b__\b_g\bge\bet\bta\bat\btt\btr\bri\bib\bbu\but\bte\be_\b__\b_(...)\n |      x.__getattribute__('name') <==> x.name\n |  \n |  _\b__\b_g\bge\bet\bti\bit\bte\bem\bm_\b__\b_(...)\n |      x.__getitem__(y) <==> x[y]\n |  \n |  _\b__\b_g\bge\bet\btn\bne\bew\bwa\bar\brg\bgs\bs_\b__\b_(...)\n |  \n |  _\b__\b_g\bge\bet\bts\bsl\bli\bic\bce\be_\b__\b_(...)\n |      x.__getslice__(i, j) <==> x[i:j]\n |      \n |      Use of negative indices is not supported.\n |  \n |  _\b__\b_g\bgt\bt_\b__\b_(...)\n |      x.__gt__(y) <==> x>y\n |  \n |  _\b__\b_h\bha\bas\bsh\bh_\b__\b_(...)\n |      x.__hash__() <==> hash(x)\n |  \n |  _\b__\b_i\bit\bte\ber\br_\b__\b_(...)\n |      x.__iter__() <==> iter(x)\n |  \n |  _\b__\b_l\ble\be_\b__\b_(...)\n |      x.__le__(y) <==> x<=y\n |  \n |  _\b__\b_l\ble\ben\bn_\b__\b_(...)\n |      x.__len__() <==> len(x)\n |  \n |  _\b__\b_l\blt\bt_\b__\b_(...)\n |      x.__lt__(y) <==> x<y\n |  \n |  _\b__\b_m\bmu\bul\bl_\b__\b_(...)\n |      x.__mul__(n) <==> x*n\n |  \n |  _\b__\b_n\bne\be_\b__\b_(...)\n |      x.__ne__(y) <==> x!=y\n |  \n |  _\b__\b_r\bre\bep\bpr\br_\b__\b_(...)\n |      x.__repr__() <==> repr(x)\n |  \n |  _\b__\b_r\brm\bmu\bul\bl_\b__\b_(...)\n |      x.__rmul__(n) <==> n*x\n |  \n |  _\b__\b_s\bsi\biz\bze\beo\bof\bf_\b__\b_(...)\n |      T.__sizeof__() -- size of T in memory, in bytes\n |  \n |  c\bco\bou\bun\bnt\bt(...)\n |      T.count(value) -> integer -- return number of occurrences of value\n |  \n |  i\bin\bnd\bde\bex\bx(...)\n |      T.index(value, [start, [stop]]) -> integer -- return first index of value.\n |      Raises ValueError if the value is not present.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  _\b__\b_n\bne\bew\bw_\b__\b_ = <built-in method __new__ of type object>\n |      T.__new__(S, ...) -> a new object with type S, a subtype of T", "group_id": 8628, "id": 595238}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302292746.7912209, "message": "Python Library Documentation: function join in os.path\n\no\bos\bs.\b.p\bpa\bat\bth\bh.\b.j\bjo\boi\bin\bn = join(a, *p)\n    Join two or more pathname components, inserting '/' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.", "group_id": 8628, "id": 595392}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302292279.9304709, "message": "/help os.path.join", "group_id": 8628, "id": 595298}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302292281.153964, "message": "Python Library Documentation: unicode object\n\nclass u\bun\bni\bic\bco\bod\bde\be(basestring)\n |  unicode(string [, encoding[, errors]]) -> object\n |  \n |  Create a new Unicode object from the given encoded string.\n |  encoding defaults to the current default string encoding.\n |  errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\n |  \n |  Method resolution order:\n |      unicode\n |      basestring\n |      object\n |  \n |  Methods defined here:\n |  \n |  _\b__\b_a\bad\bdd\bd_\b__\b_(...)\n |      x.__add__(y) <==> x+y\n |  \n |  _\b__\b_c\bco\bon\bnt\bta\bai\bin\bns\bs_\b__\b_(...)\n |      x.__contains__(y) <==> y in x\n |  \n |  _\b__\b_e\beq\bq_\b__\b_(...)\n |      x.__eq__(y) <==> x==y\n |  \n |  _\b__\b_f\bfo\bor\brm\bma\bat\bt_\b__\b_(...)\n |      S.__format__(format_spec) -> unicode\n |      \n |      Return a formatted version of S as described by format_spec.\n |  \n |  _\b__\b_g\bge\be_\b__\b_(...)\n |      x.__ge__(y) <==> x>=y\n |  \n |  _\b__\b_g\bge\bet\bta\bat\btt\btr\bri\bib\bbu\but\bte\be_\b__\b_(...)\n |      x.__getattribute__('name') <==> x.name\n |  \n |  _\b__\b_g\bge\bet\bti\bit\bte\bem\bm_\b__\b_(...)\n |      x.__getitem__(y) <==> x[y]\n |  \n |  _\b__\b_g\bge\bet\btn\bne\bew\bwa\bar\brg\bgs\bs_\b__\b_(...)\n |  \n |  _\b__\b_g\bge\bet\bts\bsl\bli\bic\bce\be_\b__\b_(...)\n |      x.__getslice__(i, j) <==> x[i:j]\n |      \n |      Use of negative indices is not supported.\n |  \n |  _\b__\b_g\bgt\bt_\b__\b_(...)\n |      x.__gt__(y) <==> x>y\n |  \n |  _\b__\b_h\bha\bas\bsh\bh_\b__\b_(...)\n |      x.__hash__() <==> hash(x)\n |  \n |  _\b__\b_l\ble\be_\b__\b_(...)\n |      x.__le__(y) <==> x<=y\n |  \n |  _\b__\b_l\ble\ben\bn_\b__\b_(...)\n |      x.__len__() <==> len(x)\n |  \n |  _\b__\b_l\blt\bt_\b__\b_(...)\n |      x.__lt__(y) <==> x<y\n |  \n |  _\b__\b_m\bmo\bod\bd_\b__\b_(...)\n |      x.__mod__(y) <==> x%y\n |  \n |  _\b__\b_m\bmu\bul\bl_\b__\b_(...)\n |      x.__mul__(n) <==> x*n\n |  \n |  _\b__\b_n\bne\be_\b__\b_(...)\n |      x.__ne__(y) <==> x!=y\n |  \n |  _\b__\b_r\bre\bep\bpr\br_\b__\b_(...)\n |      x.__repr__() <==> repr(x)\n |  \n |  _\b__\b_r\brm\bmo\bod\bd_\b__\b_(...)\n |      x.__rmod__(y) <==> y%x\n |  \n |  _\b__\b_r\brm\bmu\bul\bl_\b__\b_(...)\n |      x.__rmul__(n) <==> n*x\n |  \n |  _\b__\b_s\bsi\biz\bze\beo\bof\bf_\b__\b_(...)\n |      S.__sizeof__() -> size of S in memory, in bytes\n |  \n |  _\b__\b_s\bst\btr\br_\b__\b_(...)\n |      x.__str__() <==> str(x)\n |  \n |  c\bca\bap\bpi\bit\bta\bal\bli\biz\bze\be(...)\n |      S.capitalize() -> unicode\n |      \n |      Return a capitalized version of S, i.e. make the first character\n |      have upper case and the rest lower case.\n |  \n |  c\bce\ben\bnt\bte\ber\br(...)\n |      S.center(width[, fillchar]) -> unicode\n |      \n |      Return S centered in a Unicode string of length width. Padding is\n |      done using the specified fill character (default is a space)\n |  \n |  c\bco\bou\bun\bnt\bt(...)\n |      S.count(sub[, start[, end]]) -> int\n |      \n |      Return the number of non-overlapping occurrences of substring sub in\n |      Unicode string S[start:end].  Optional arguments start and end are\n |      interpreted as in slice notation.\n |  \n |  d\bde\bec\bco\bod\bde\be(...)\n |      S.decode([encoding[,errors]]) -> string or unicode\n |      \n |      Decodes S using the codec registered for encoding. encoding defaults\n |      to the default encoding. errors may be given to set a different error\n |      handling scheme. Default is 'strict' meaning that encoding errors raise\n |      a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'\n |      as well as any other name registerd with codecs.register_error that is\n |      able to handle UnicodeDecodeErrors.\n |  \n |  e\ben\bnc\bco\bod\bde\be(...)\n |      S.encode([encoding[,errors]]) -> string or unicode\n |      \n |      Encodes S using the codec registered for encoding. encoding defaults\n |      to the default encoding. errors may be given to set a different error\n |      handling scheme. Default is 'strict' meaning that encoding errors raise\n |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and\n |      'xmlcharrefreplace' as well as any other name registered with\n |      codecs.register_error that can handle UnicodeEncodeErrors.\n |  \n |  e\ben\bnd\bds\bsw\bwi\bit\bth\bh(...)\n |      S.endswith(suffix[, start[, end]]) -> bool\n |      \n |      Return True if S ends with the specified suffix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      suffix can also be a tuple of strings to try.\n |  \n |  e\bex\bxp\bpa\ban\bnd\bdt\bta\bab\bbs\bs(...)\n |      S.expandtabs([tabsize]) -> unicode\n |      \n |      Return a copy of S where all tab characters are expanded using spaces.\n |      If tabsize is not given, a tab size of 8 characters is assumed.\n |  \n |  f\bfi\bin\bnd\bd(...)\n |      S.find(sub [,start [,end]]) -> int\n |      \n |      Return the lowest index in S where substring sub is found,\n |      such that sub is contained within s[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  f\bfo\bor\brm\bma\bat\bt(...)\n |      S.format(*args, **kwargs) -> unicode\n |      \n |      Return a formatted version of S, using substitutions from args and kwargs.\n |      The substitutions are identified by braces ('{' and '}').\n |  \n |  i\bin\bnd\bde\bex\bx(...)\n |      S.index(sub [,start [,end]]) -> int\n |      \n |      Like S.find() but raise ValueError when the substring is not found.\n |  \n |  i\bis\bsa\bal\bln\bnu\bum\bm(...)\n |      S.isalnum() -> bool\n |      \n |      Return True if all characters in S are alphanumeric\n |      and there is at least one character in S, False otherwise.\n |  \n |  i\bis\bsa\bal\blp\bph\bha\ba(...)\n |      S.isalpha() -> bool\n |      \n |      Return True if all characters in S are alphabetic\n |      and there is at least one character in S, False otherwise.\n |  \n |  i\bis\bsd\bde\bec\bci\bim\bma\bal\bl(...)\n |      S.isdecimal() -> bool\n |      \n |      Return True if there are only decimal characters in S,\n |      False otherwise.\n |  \n |  i\bis\bsd\bdi\big\bgi\bit\bt(...)\n |      S.isdigit() -> bool\n |      \n |      Return True if all characters in S are digits\n |      and there is at least one character in S, False otherwise.\n |  \n |  i\bis\bsl\blo\bow\bwe\ber\br(...)\n |      S.islower() -> bool\n |      \n |      Return True if all cased characters in S are lowercase and there is\n |      at least one cased character in S, False otherwise.\n |  \n |  i\bis\bsn\bnu\bum\bme\ber\bri\bic\bc(...)\n |      S.isnumeric() -> bool\n |      \n |      Return True if there are only numeric characters in S,\n |      False otherwise.\n |  \n |  i\bis\bss\bsp\bpa\bac\bce\be(...)\n |      S.isspace() -> bool\n |      \n |      Return True if all characters in S are whitespace\n |      and there is at least one character in S, False otherwise.\n |  \n |  i\bis\bst\bti\bit\btl\ble\be(...)\n |      S.istitle() -> bool\n |      \n |      Return True if S is a titlecased string and there is at least one\n |      character in S, i.e. upper- and titlecase characters may only\n |      follow uncased characters and lowercase characters only cased ones.\n |      Return False otherwise.\n |  \n |  i\bis\bsu\bup\bpp\bpe\ber\br(...)\n |      S.isupper() -> bool\n |      \n |      Return True if all cased characters in S are uppercase and there is\n |      at least one cased character in S, False otherwise.\n |  \n |  j\bjo\boi\bin\bn(...)\n |      S.join(iterable) -> unicode\n |      \n |      Return a string which is the concatenation of the strings in the\n |      iterable.  The separator between elements is S.\n |  \n |  l\blj\bju\bus\bst\bt(...)\n |      S.ljust(width[, fillchar]) -> int\n |      \n |      Return S left-justified in a Unicode string of length width. Padding is\n |      done using the specified fill character (default is a space).\n |  \n |  l\blo\bow\bwe\ber\br(...)\n |      S.lower() -> unicode\n |      \n |      Return a copy of the string S converted to lowercase.\n |  \n |  l\bls\bst\btr\bri\bip\bp(...)\n |      S.lstrip([chars]) -> unicode\n |      \n |      Return a copy of the string S with leading whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is a str, it will be converted to unicode before stripping\n |  \n |  p\bpa\bar\brt\bti\bit\bti\bio\bon\bn(...)\n |      S.partition(sep) -> (head, sep, tail)\n |      \n |      Search for the separator sep in S, and return the part before it,\n |      the separator itself, and the part after it.  If the separator is not\n |      found, return S and two empty strings.\n |  \n |  r\bre\bep\bpl\bla\bac\bce\be(...)\n |      S.replace(old, new[, count]) -> unicode\n |      \n |      Return a copy of S with all occurrences of substring\n |      old replaced by new.  If the optional argument count is\n |      given, only the first count occurrences are replaced.\n |  \n |  r\brf\bfi\bin\bnd\bd(...)\n |      S.rfind(sub [,start [,end]]) -> int\n |      \n |      Return the highest index in S where substring sub is found,\n |      such that sub is contained within s[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  r\bri\bin\bnd\bde\bex\bx(...)\n |      S.rindex(sub [,start [,end]]) -> int\n |      \n |      Like S.rfind() but raise ValueError when the substring is not found.\n |  \n |  r\brj\bju\bus\bst\bt(...)\n |      S.rjust(width[, fillchar]) -> unicode\n |      \n |      Return S right-justified in a Unicode string of length width. Padding is\n |      done using the specified fill character (default is a space).\n |  \n |  r\brp\bpa\bar\brt\bti\bit\bti\bio\bon\bn(...)\n |      S.rpartition(sep) -> (head, sep, tail)\n |      \n |      Search for the separator sep in S, starting at the end of S, and return\n |      the part before it, the separator itself, and the part after it.  If the\n |      separator is not found, return two empty strings and S.\n |  \n |  r\brs\bsp\bpl\bli\bit\bt(...)\n |      S.rsplit([sep [,maxsplit]]) -> list of strings\n |      \n |      Return a list of the words in S, using sep as the\n |      delimiter string, starting at the end of the string and\n |      working to the front.  If maxsplit is given, at most maxsplit\n |      splits are done. If sep is not specified, any whitespace string\n |      is a separator.\n |  \n |  r\brs\bst\btr\bri\bip\bp(...)\n |      S.rstrip([chars]) -> unicode\n |      \n |      Return a copy of the string S with trailing whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is a str, it will be converted to unicode before stripping\n |  \n |  s\bsp\bpl\bli\bit\bt(...)\n |      S.split([sep [,maxsplit]]) -> list of strings\n |      \n |      Return a list of the words in S, using sep as the\n |      delimiter string.  If maxsplit is given, at most maxsplit\n |      splits are done. If sep is not specified or is None, any\n |      whitespace string is a separator and empty strings are\n |      removed from the result.\n |  \n |  s\bsp\bpl\bli\bit\btl\bli\bin\bne\bes\bs(...)\n |      S.splitlines([keepends]) -> list of strings\n |      \n |      Return a list of the lines in S, breaking at line boundaries.\n |      Line breaks are not included in the resulting list unless keepends\n |      is given and true.\n |  \n |  s\bst\bta\bar\brt\bts\bsw\bwi\bit\bth\bh(...)\n |      S.startswith(prefix[, start[, end]]) -> bool\n |      \n |      Return True if S starts with the specified prefix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      prefix can also be a tuple of strings to try.\n |  \n |  s\bst\btr\bri\bip\bp(...)\n |      S.strip([chars]) -> unicode\n |      \n |      Return a copy of the string S with leading and trailing\n |      whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is a str, it will be converted to unicode before stripping\n |  \n |  s\bsw\bwa\bap\bpc\bca\bas\bse\be(...)\n |      S.swapcase() -> unicode\n |      \n |      Return a copy of S with uppercase characters converted to lowercase\n |      and vice versa.\n |  \n |  t\bti\bit\btl\ble\be(...)\n |      S.title() -> unicode\n |      \n |      Return a titlecased version of S, i.e. words start with title case\n |      characters, all remaining cased characters have lower case.\n |  \n |  t\btr\bra\ban\bns\bsl\bla\bat\bte\be(...)\n |      S.translate(table) -> unicode\n |      \n |      Return a copy of the string S, where all characters have been mapped\n |      through the given translation table, which must be a mapping of\n |      Unicode ordinals to Unicode ordinals, Unicode strings or None.\n |      Unmapped characters are left untouched. Characters mapped to None\n |      are deleted.\n |  \n |  u\bup\bpp\bpe\ber\br(...)\n |      S.upper() -> unicode\n |      \n |      Return a copy of S converted to uppercase.\n |  \n |  z\bzf\bfi\bil\bll\bl(...)\n |      S.zfill(width) -> unicode\n |      \n |      Pad a numeric string S with zeros on the left, to fill a field\n |      of the specified width. The string S is never truncated.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  _\b__\b_n\bne\bew\bw_\b__\b_ = <built-in method __new__ of type object>\n |      T.__new__(S, ...) -> a new object with type S, a subtype of T", "group_id": 8628, "id": 595300}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302292683.951566, "message": "Python Library Documentation: unicode object\n\nclass u\bun\bni\bic\bco\bod\bde\be(basestring)\n |  unicode(string [, encoding[, errors]]) -> object\n |  \n |  Create a new Unicode object from the given encoded string.\n |  encoding defaults to the current default string encoding.\n |  errors can be 'strict', 'replace' or 'ignore' and defaults to 'strict'.\n |  \n |  Method resolution order:\n |      unicode\n |      basestring\n |      object\n |  \n |  Methods defined here:\n |  \n |  _\b__\b_a\bad\bdd\bd_\b__\b_(...)\n |      x.__add__(y) <==> x+y\n |  \n |  _\b__\b_c\bco\bon\bnt\bta\bai\bin\bns\bs_\b__\b_(...)\n |      x.__contains__(y) <==> y in x\n |  \n |  _\b__\b_e\beq\bq_\b__\b_(...)\n |      x.__eq__(y) <==> x==y\n |  \n |  _\b__\b_f\bfo\bor\brm\bma\bat\bt_\b__\b_(...)\n |      S.__format__(format_spec) -> unicode\n |      \n |      Return a formatted version of S as described by format_spec.\n |  \n |  _\b__\b_g\bge\be_\b__\b_(...)\n |      x.__ge__(y) <==> x>=y\n |  \n |  _\b__\b_g\bge\bet\bta\bat\btt\btr\bri\bib\bbu\but\bte\be_\b__\b_(...)\n |      x.__getattribute__('name') <==> x.name\n |  \n |  _\b__\b_g\bge\bet\bti\bit\bte\bem\bm_\b__\b_(...)\n |      x.__getitem__(y) <==> x[y]\n |  \n |  _\b__\b_g\bge\bet\btn\bne\bew\bwa\bar\brg\bgs\bs_\b__\b_(...)\n |  \n |  _\b__\b_g\bge\bet\bts\bsl\bli\bic\bce\be_\b__\b_(...)\n |      x.__getslice__(i, j) <==> x[i:j]\n |      \n |      Use of negative indices is not supported.\n |  \n |  _\b__\b_g\bgt\bt_\b__\b_(...)\n |      x.__gt__(y) <==> x>y\n |  \n |  _\b__\b_h\bha\bas\bsh\bh_\b__\b_(...)\n |      x.__hash__() <==> hash(x)\n |  \n |  _\b__\b_l\ble\be_\b__\b_(...)\n |      x.__le__(y) <==> x<=y\n |  \n |  _\b__\b_l\ble\ben\bn_\b__\b_(...)\n |      x.__len__() <==> len(x)\n |  \n |  _\b__\b_l\blt\bt_\b__\b_(...)\n |      x.__lt__(y) <==> x<y\n |  \n |  _\b__\b_m\bmo\bod\bd_\b__\b_(...)\n |      x.__mod__(y) <==> x%y\n |  \n |  _\b__\b_m\bmu\bul\bl_\b__\b_(...)\n |      x.__mul__(n) <==> x*n\n |  \n |  _\b__\b_n\bne\be_\b__\b_(...)\n |      x.__ne__(y) <==> x!=y\n |  \n |  _\b__\b_r\bre\bep\bpr\br_\b__\b_(...)\n |      x.__repr__() <==> repr(x)\n |  \n |  _\b__\b_r\brm\bmo\bod\bd_\b__\b_(...)\n |      x.__rmod__(y) <==> y%x\n |  \n |  _\b__\b_r\brm\bmu\bul\bl_\b__\b_(...)\n |      x.__rmul__(n) <==> n*x\n |  \n |  _\b__\b_s\bsi\biz\bze\beo\bof\bf_\b__\b_(...)\n |      S.__sizeof__() -> size of S in memory, in bytes\n |  \n |  _\b__\b_s\bst\btr\br_\b__\b_(...)\n |      x.__str__() <==> str(x)\n |  \n |  c\bca\bap\bpi\bit\bta\bal\bli\biz\bze\be(...)\n |      S.capitalize() -> unicode\n |      \n |      Return a capitalized version of S, i.e. make the first character\n |      have upper case and the rest lower case.\n |  \n |  c\bce\ben\bnt\bte\ber\br(...)\n |      S.center(width[, fillchar]) -> unicode\n |      \n |      Return S centered in a Unicode string of length width. Padding is\n |      done using the specified fill character (default is a space)\n |  \n |  c\bco\bou\bun\bnt\bt(...)\n |      S.count(sub[, start[, end]]) -> int\n |      \n |      Return the number of non-overlapping occurrences of substring sub in\n |      Unicode string S[start:end].  Optional arguments start and end are\n |      interpreted as in slice notation.\n |  \n |  d\bde\bec\bco\bod\bde\be(...)\n |      S.decode([encoding[,errors]]) -> string or unicode\n |      \n |      Decodes S using the codec registered for encoding. encoding defaults\n |      to the default encoding. errors may be given to set a different error\n |      handling scheme. Default is 'strict' meaning that encoding errors raise\n |      a UnicodeDecodeError. Other possible values are 'ignore' and 'replace'\n |      as well as any other name registerd with codecs.register_error that is\n |      able to handle UnicodeDecodeErrors.\n |  \n |  e\ben\bnc\bco\bod\bde\be(...)\n |      S.encode([encoding[,errors]]) -> string or unicode\n |      \n |      Encodes S using the codec registered for encoding. encoding defaults\n |      to the default encoding. errors may be given to set a different error\n |      handling scheme. Default is 'strict' meaning that encoding errors raise\n |      a UnicodeEncodeError. Other possible values are 'ignore', 'replace' and\n |      'xmlcharrefreplace' as well as any other name registered with\n |      codecs.register_error that can handle UnicodeEncodeErrors.\n |  \n |  e\ben\bnd\bds\bsw\bwi\bit\bth\bh(...)\n |      S.endswith(suffix[, start[, end]]) -> bool\n |      \n |      Return True if S ends with the specified suffix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      suffix can also be a tuple of strings to try.\n |  \n |  e\bex\bxp\bpa\ban\bnd\bdt\bta\bab\bbs\bs(...)\n |      S.expandtabs([tabsize]) -> unicode\n |      \n |      Return a copy of S where all tab characters are expanded using spaces.\n |      If tabsize is not given, a tab size of 8 characters is assumed.\n |  \n |  f\bfi\bin\bnd\bd(...)\n |      S.find(sub [,start [,end]]) -> int\n |      \n |      Return the lowest index in S where substring sub is found,\n |      such that sub is contained within s[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  f\bfo\bor\brm\bma\bat\bt(...)\n |      S.format(*args, **kwargs) -> unicode\n |      \n |      Return a formatted version of S, using substitutions from args and kwargs.\n |      The substitutions are identified by braces ('{' and '}').\n |  \n |  i\bin\bnd\bde\bex\bx(...)\n |      S.index(sub [,start [,end]]) -> int\n |      \n |      Like S.find() but raise ValueError when the substring is not found.\n |  \n |  i\bis\bsa\bal\bln\bnu\bum\bm(...)\n |      S.isalnum() -> bool\n |      \n |      Return True if all characters in S are alphanumeric\n |      and there is at least one character in S, False otherwise.\n |  \n |  i\bis\bsa\bal\blp\bph\bha\ba(...)\n |      S.isalpha() -> bool\n |      \n |      Return True if all characters in S are alphabetic\n |      and there is at least one character in S, False otherwise.\n |  \n |  i\bis\bsd\bde\bec\bci\bim\bma\bal\bl(...)\n |      S.isdecimal() -> bool\n |      \n |      Return True if there are only decimal characters in S,\n |      False otherwise.\n |  \n |  i\bis\bsd\bdi\big\bgi\bit\bt(...)\n |      S.isdigit() -> bool\n |      \n |      Return True if all characters in S are digits\n |      and there is at least one character in S, False otherwise.\n |  \n |  i\bis\bsl\blo\bow\bwe\ber\br(...)\n |      S.islower() -> bool\n |      \n |      Return True if all cased characters in S are lowercase and there is\n |      at least one cased character in S, False otherwise.\n |  \n |  i\bis\bsn\bnu\bum\bme\ber\bri\bic\bc(...)\n |      S.isnumeric() -> bool\n |      \n |      Return True if there are only numeric characters in S,\n |      False otherwise.\n |  \n |  i\bis\bss\bsp\bpa\bac\bce\be(...)\n |      S.isspace() -> bool\n |      \n |      Return True if all characters in S are whitespace\n |      and there is at least one character in S, False otherwise.\n |  \n |  i\bis\bst\bti\bit\btl\ble\be(...)\n |      S.istitle() -> bool\n |      \n |      Return True if S is a titlecased string and there is at least one\n |      character in S, i.e. upper- and titlecase characters may only\n |      follow uncased characters and lowercase characters only cased ones.\n |      Return False otherwise.\n |  \n |  i\bis\bsu\bup\bpp\bpe\ber\br(...)\n |      S.isupper() -> bool\n |      \n |      Return True if all cased characters in S are uppercase and there is\n |      at least one cased character in S, False otherwise.\n |  \n |  j\bjo\boi\bin\bn(...)\n |      S.join(iterable) -> unicode\n |      \n |      Return a string which is the concatenation of the strings in the\n |      iterable.  The separator between elements is S.\n |  \n |  l\blj\bju\bus\bst\bt(...)\n |      S.ljust(width[, fillchar]) -> int\n |      \n |      Return S left-justified in a Unicode string of length width. Padding is\n |      done using the specified fill character (default is a space).\n |  \n |  l\blo\bow\bwe\ber\br(...)\n |      S.lower() -> unicode\n |      \n |      Return a copy of the string S converted to lowercase.\n |  \n |  l\bls\bst\btr\bri\bip\bp(...)\n |      S.lstrip([chars]) -> unicode\n |      \n |      Return a copy of the string S with leading whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is a str, it will be converted to unicode before stripping\n |  \n |  p\bpa\bar\brt\bti\bit\bti\bio\bon\bn(...)\n |      S.partition(sep) -> (head, sep, tail)\n |      \n |      Search for the separator sep in S, and return the part before it,\n |      the separator itself, and the part after it.  If the separator is not\n |      found, return S and two empty strings.\n |  \n |  r\bre\bep\bpl\bla\bac\bce\be(...)\n |      S.replace(old, new[, count]) -> unicode\n |      \n |      Return a copy of S with all occurrences of substring\n |      old replaced by new.  If the optional argument count is\n |      given, only the first count occurrences are replaced.\n |  \n |  r\brf\bfi\bin\bnd\bd(...)\n |      S.rfind(sub [,start [,end]]) -> int\n |      \n |      Return the highest index in S where substring sub is found,\n |      such that sub is contained within s[start:end].  Optional\n |      arguments start and end are interpreted as in slice notation.\n |      \n |      Return -1 on failure.\n |  \n |  r\bri\bin\bnd\bde\bex\bx(...)\n |      S.rindex(sub [,start [,end]]) -> int\n |      \n |      Like S.rfind() but raise ValueError when the substring is not found.\n |  \n |  r\brj\bju\bus\bst\bt(...)\n |      S.rjust(width[, fillchar]) -> unicode\n |      \n |      Return S right-justified in a Unicode string of length width. Padding is\n |      done using the specified fill character (default is a space).\n |  \n |  r\brp\bpa\bar\brt\bti\bit\bti\bio\bon\bn(...)\n |      S.rpartition(sep) -> (head, sep, tail)\n |      \n |      Search for the separator sep in S, starting at the end of S, and return\n |      the part before it, the separator itself, and the part after it.  If the\n |      separator is not found, return two empty strings and S.\n |  \n |  r\brs\bsp\bpl\bli\bit\bt(...)\n |      S.rsplit([sep [,maxsplit]]) -> list of strings\n |      \n |      Return a list of the words in S, using sep as the\n |      delimiter string, starting at the end of the string and\n |      working to the front.  If maxsplit is given, at most maxsplit\n |      splits are done. If sep is not specified, any whitespace string\n |      is a separator.\n |  \n |  r\brs\bst\btr\bri\bip\bp(...)\n |      S.rstrip([chars]) -> unicode\n |      \n |      Return a copy of the string S with trailing whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is a str, it will be converted to unicode before stripping\n |  \n |  s\bsp\bpl\bli\bit\bt(...)\n |      S.split([sep [,maxsplit]]) -> list of strings\n |      \n |      Return a list of the words in S, using sep as the\n |      delimiter string.  If maxsplit is given, at most maxsplit\n |      splits are done. If sep is not specified or is None, any\n |      whitespace string is a separator and empty strings are\n |      removed from the result.\n |  \n |  s\bsp\bpl\bli\bit\btl\bli\bin\bne\bes\bs(...)\n |      S.splitlines([keepends]) -> list of strings\n |      \n |      Return a list of the lines in S, breaking at line boundaries.\n |      Line breaks are not included in the resulting list unless keepends\n |      is given and true.\n |  \n |  s\bst\bta\bar\brt\bts\bsw\bwi\bit\bth\bh(...)\n |      S.startswith(prefix[, start[, end]]) -> bool\n |      \n |      Return True if S starts with the specified prefix, False otherwise.\n |      With optional start, test S beginning at that position.\n |      With optional end, stop comparing S at that position.\n |      prefix can also be a tuple of strings to try.\n |  \n |  s\bst\btr\bri\bip\bp(...)\n |      S.strip([chars]) -> unicode\n |      \n |      Return a copy of the string S with leading and trailing\n |      whitespace removed.\n |      If chars is given and not None, remove characters in chars instead.\n |      If chars is a str, it will be converted to unicode before stripping\n |  \n |  s\bsw\bwa\bap\bpc\bca\bas\bse\be(...)\n |      S.swapcase() -> unicode\n |      \n |      Return a copy of S with uppercase characters converted to lowercase\n |      and vice versa.\n |  \n |  t\bti\bit\btl\ble\be(...)\n |      S.title() -> unicode\n |      \n |      Return a titlecased version of S, i.e. words start with title case\n |      characters, all remaining cased characters have lower case.\n |  \n |  t\btr\bra\ban\bns\bsl\bla\bat\bte\be(...)\n |      S.translate(table) -> unicode\n |      \n |      Return a copy of the string S, where all characters have been mapped\n |      through the given translation table, which must be a mapping of\n |      Unicode ordinals to Unicode ordinals, Unicode strings or None.\n |      Unmapped characters are left untouched. Characters mapped to None\n |      are deleted.\n |  \n |  u\bup\bpp\bpe\ber\br(...)\n |      S.upper() -> unicode\n |      \n |      Return a copy of S converted to uppercase.\n |  \n |  z\bzf\bfi\bil\bll\bl(...)\n |      S.zfill(width) -> unicode\n |      \n |      Pad a numeric string S with zeros on the left, to fill a field\n |      of the specified width. The string S is never truncated.\n |  \n |  ----------------------------------------------------------------------\n |  Data and other attributes defined here:\n |  \n |  _\b__\b_n\bne\bew\bw_\b__\b_ = <built-in method __new__ of type object>\n |      T.__new__(S, ...) -> a new object with type S, a subtype of T", "group_id": 8628, "id": 595378}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302292745.9768369, "message": "/help os.path.join", "group_id": 8628, "id": 595390}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302293656.3637559, "message": "/help os.path.join", "group_id": 8628, "id": 595541}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302293747.083976, "message": "/help django.contrib.admin", "group_id": 8628, "id": 595562}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302293673.1348, "message": "/help os.path.join", "group_id": 8628, "id": 595545}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302294129.440273, "message": "/help django.contrib.admin", "group_id": 8628, "id": 595644}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302293673.9469731, "message": "Python Library Documentation: function join in os.path\n\nos.path.join = join(a, *p)\n    Join two or more pathname components, inserting '/' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.", "group_id": 8628, "id": 595546}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302293735.526206, "message": "/help django.contrib", "group_id": 8628, "id": 595557}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302293736.3353069, "message": "Python Library Documentation: package django.contrib in django\n\nNAME\n    django.contrib\n\nFILE\n    /usr/local/Cellar/python/2.7.1/lib/python2.7/site-packages/django/contrib/__init__.py\n\nPACKAGE CONTENTS\n    admin (package)\n    admindocs (package)\n    auth (package)\n    comments (package)\n    contenttypes (package)\n    csrf (package)\n    databrowse (package)\n    flatpages (package)\n    formtools (package)\n    gis (package)\n    humanize (package)\n    localflavor (package)\n    markup (package)\n    messages (package)\n    redirects (package)\n    sessions (package)\n    sitemaps (package)\n    sites (package)\n    syndication (package)\n    webdesign (package)", "group_id": 8628, "id": 595558}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302294144.6171319, "message": "/help os.path", "group_id": 8628, "id": 595650}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302294774.1870501, "message": "/help", "group_id": 8628, "id": 595735}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302294715.8936009, "message": "/help", "group_id": 8628, "id": 595718}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302295195.2976091, "message": "/help", "group_id": 8628, "id": 595777}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302295544.0501139, "message": "/help", "group_id": 8628, "id": 595842}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302294099.348263, "message": "/help django.contrib.admin", "group_id": 8628, "id": 595634}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302295231.229625, "message": "/help", "group_id": 8628, "id": 595782}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302295573.5249131, "message": "The python chatbot currently implements these commands:\n/doc <something>: return python 2.7's documentation for <something>", "group_id": 8628, "id": 595847}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302294130.34356, "message": "error importing django.contrib.admin: Settings cannot be imported, because environment variable DJANGO_SETTINGS_MODULE is undefined.", "group_id": 8628, "id": 595645}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302294146.156992, "message": "Python Library Documentation: module posixpath in os\n\nNAME\n    posixpath - Common operations on Posix pathnames.\n\nFILE\n    /usr/local/Cellar/python/2.7.1/lib/python2.7/posixpath.py\n\nDESCRIPTION\n    Instead of importing this module directly, import os and refer to\n    this module as os.path.  The \"os.path\" name is an alias for this\n    module on Posix systems; on other systems (e.g. Mac, Windows),\n    os.path provides the same operations in a manner specific to that\n    platform, and is an alias to another module (e.g. macpath, ntpath).\n    \n    Some of this can actually be useful on non-Posix systems too, e.g.\n    for manipulation of the pathname component of URLs.\n\nFUNCTIONS\n    abspath(path)\n        Return an absolute path.\n    \n    basename(p)\n        Returns the final component of a pathname\n    \n    commonprefix(m)\n        Given a list of pathnames, returns the longest common leading component\n    \n    dirname(p)\n        Returns the directory component of a pathname\n    \n    exists(path)\n        Test whether a path exists.  Returns False for broken symbolic links\n    \n    expanduser(path)\n        Expand ~ and ~user constructions.  If user or $HOME is unknown,\n        do nothing.\n    \n    expandvars(path)\n        Expand shell variables of form $var and ${var}.  Unknown variables\n        are left unchanged.\n    \n    getatime(filename)\n        Return the last access time of a file, reported by os.stat().\n    \n    getctime(filename)\n        Return the metadata change time of a file, reported by os.stat().\n    \n    getmtime(filename)\n        Return the last modification time of a file, reported by os.stat().\n    \n    getsize(filename)\n        Return the size of a file, reported by os.stat().\n    \n    isabs(s)\n        Test whether a path is absolute\n    \n    isdir(s)\n        Return true if the pathname refers to an existing directory.\n    \n    isfile(path)\n        Test whether a path is a regular file\n    \n    islink(path)\n        Test whether a path is a symbolic link\n    \n    ismount(path)\n        Test whether a path is a mount point\n    \n    join(a, *p)\n        Join two or more pathname components, inserting '/' as needed.\n        If any component is an absolute path, all previous path components\n        will be discarded.\n    \n    lexists(path)\n        Test whether a path exists.  Returns True for broken symbolic links\n    \n    normcase(s)\n        Normalize case of pathname.  Has no effect under Posix\n    \n    normpath(path)\n        Normalize path, eliminating double slashes, etc.\n    \n    realpath(filename)\n        Return the canonical path of the specified filename, eliminating any\n        symbolic links encountered in the path.\n    \n    relpath(path, start='.')\n        Return a relative version of a path\n    \n    samefile(f1, f2)\n        Test whether two pathnames reference the same actual file\n    \n    sameopenfile(fp1, fp2)\n        Test whether two open file objects reference the same file\n    \n    samestat(s1, s2)\n        Test whether two stat buffers reference the same file\n    \n    split(p)\n        Split a pathname.  Returns tuple \"(head, tail)\" where \"tail\" is\n        everything after the final slash.  Either part may be empty.\n    \n    splitdrive(p)\n        Split a pathname into drive and path. On Posix, drive is always\n        empty.\n    \n    splitext(p)\n        Split the extension from a pathname.\n        \n        Extension is everything from the last dot to the end, ignoring\n        leading dots.  Returns \"(root, ext)\"; ext may be empty.\n    \n    walk(top, func, arg)\n        Directory tree walk with callback function.\n        \n        For each directory in the directory tree rooted at top (including top\n        itself, but excluding '.' and '..'), call func(arg, dirname, fnames).\n        dirname is the name of the directory, and fnames a list of the names of\n        the files and subdirectories in dirname (excluding '.' and '..').  func\n        may modify the fnames list in-place (e.g. via del or slice assignment),\n        and walk will only recurse into the subdirectories whose names remain in\n        fnames; this can be used to implement a filter, or to impose a specific\n        order of visiting.  No semantics are defined for, or required of, arg,\n        beyond that arg is always passed to func.  It can be used, e.g., to pass\n        a filename pattern, or a mutable object designed to accumulate\n        statistics.  Passing None for arg is common.\n\nDATA\n    __all__ = ['normcase', 'isabs', 'join', 'splitdrive', 'split', 'splite...\n    altsep = None\n    curdir = '.'\n    defpath = ':/bin:/usr/bin'\n    devnull = '/dev/null'\n    extsep = '.'\n    pardir = '..'\n    pathsep = ':'\n    sep = '/'\n    supports_unicode_filenames = True", "group_id": 8628, "id": 595651}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302295384.2762451, "message": "/help", "group_id": 8628, "id": 595807}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302295581.3281541, "message": "/doc os.path.join", "group_id": 8628, "id": 595849}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302295361.7621601, "message": "The python chatbot currently implements these commands:\n/doc <something>: return python 2.7's documentation for <something>", "group_id": 8628, "id": 595800}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302295446.068958, "message": "/help", "group_id": 8628, "id": 595820}, {"user_id": 28212, "stars": [{"date_created": 1302357222.1265769, "user_id": 1284}], "topic_id": 18115, "date_created": 1302295582.145227, "message": "Python Library Documentation: function join in os.path\n\nos.path.join = join(a, *p)\n    Join two or more pathname components, inserting '/' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.", "group_id": 8628, "id": 595850}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302295223.705653, "message": "/doc os.path.join", "group_id": 8628, "id": 595780}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302295224.5718269, "message": "Python Library Documentation: function join in os.path\n\nos.path.join = join(a, *p)\n    Join two or more pathname components, inserting '/' as needed.\n    If any component is an absolute path, all previous path components\n    will be discarded.", "group_id": 8628, "id": 595781}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302295572.669172, "message": "/help", "group_id": 8628, "id": 595846}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302375839.961798, "message": "/eval 1+2", "group_id": 8628, "id": 604720}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302357132.715667, "message": "/help", "group_id": 8628, "id": 602306}, {"user_id": 28212, "stars": [{"date_created": 1302357483.996263, "user_id": 1284}], "topic_id": 18115, "date_created": 1302357154.460423, "message": "The python chatbot currently implements these commands:\n/doc <something>: return python 2.7's documentation for <something>\n/rtd <module> <function>: return a link to readthedocs for <module> and <function>\n/zen: return the zen of python", "group_id": 8628, "id": 602309}, {"user_id": 28253, "stars": [{"date_created": 1302357245.106926, "user_id": 1284}], "topic_id": 18115, "date_created": 1302357154.5094979, "message": "The python chatbot currently implements these commands:\n/karma: who in the python room has the most karma?\n/doc <something>: return python 2.7's documentation for <something>\n/rtd <module> <function>: return a link to readthedocs for <module> and/or <function>\n/zen:", "group_id": 8628, "id": 602310}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302357168.9929969, "message": "/karma", "group_id": 8628, "id": 602311}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302357226.099659, "message": "python_chatbot: 20python_chatbot_testing: 10", "group_id": 8628, "id": 602318}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302357489.0207901, "message": "python_chatbot_testing: 20\npython_chatbot: 10", "group_id": 8628, "id": 602334}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302357591.3169069, "message": "python_chatbot_testing: 20\npython_chatbot: 10", "group_id": 8628, "id": 602340}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302357153.6484759, "message": "/help", "group_id": 8628, "id": 602308}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302357201.2950809, "message": "/karma", "group_id": 8628, "id": 602313}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302357202.092634, "message": "python_chatbot_testing: 10", "group_id": 8628, "id": 602314}, {"user_id": 28253, "stars": [{"date_created": 1302357473.5586209, "user_id": 1284}], "topic_id": 18115, "date_created": 1302357211.144717, "message": "python_chatbot_testing: 10python_chatbot: 10", "group_id": 8628, "id": 602316}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302357234.983427, "message": "/karma", "group_id": 8628, "id": 602319}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302357225.2862201, "message": "/karma", "group_id": 8628, "id": 602317}, {"user_id": 28253, "stars": [{"date_created": 1302357729.114599, "user_id": 1284}], "topic_id": 18115, "date_created": 1302357722.1450379, "message": "python_chatbot_testing: 10\npython_chatbot: 10", "group_id": 8628, "id": 602349}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302360067.075784, "message": "/karma", "group_id": 8628, "id": 602478}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302357210.308017, "message": "/karma", "group_id": 8628, "id": 602315}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302357250.6519251, "message": "/karma", "group_id": 8628, "id": 602320}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302357251.443347, "message": "python_chatbot_testing: 10", "group_id": 8628, "id": 602321}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302357331.266221, "message": "python_chatbot_testing: 10\npython_chatbot: 10", "group_id": 8628, "id": 602326}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302357477.948077, "message": "/karma", "group_id": 8628, "id": 602331}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302357478.8093691, "message": "python_chatbot_testing: 20", "group_id": 8628, "id": 602332}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302357732.57634, "message": "python_chatbot_testing: 20\npython_chatbot: 10", "group_id": 8628, "id": 602351}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302357737.774075, "message": "/karma", "group_id": 8628, "id": 602352}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302357738.583679, "message": "python_chatbot_testing: 20\npython_chatbot: 10", "group_id": 8628, "id": 602353}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302357133.5424459, "message": "The python chatbot currently implements these commands:\n/doc <something>: return python 2.7's documentation for <something>\n/rtd <module> <function>: return a link to readthedocs for <module> and <function>\n/zen: return the zen of python", "group_id": 8628, "id": 602307}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302358420.1368079, "message": "/karma", "group_id": 8628, "id": 602396}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302358486.2286351, "message": "/karma", "group_id": 8628, "id": 602401}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302357330.4553511, "message": "/karma", "group_id": 8628, "id": 602325}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302357488.206146, "message": "/karma", "group_id": 8628, "id": 602333}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302357590.4764259, "message": "/karma", "group_id": 8628, "id": 602339}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302357714.546591, "message": "python_chatbot_testing: 20\npython_chatbot: 10", "group_id": 8628, "id": 602347}, {"user_id": 1284, "stars": [{"date_created": 1302357735.413105, "user_id": 1284}], "topic_id": 18115, "date_created": 1302357721.344116, "message": "/karma", "group_id": 8628, "id": 602348}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302357731.7670269, "message": "/karma", "group_id": 8628, "id": 602350}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302357713.7241631, "message": "/karma", "group_id": 8628, "id": 602346}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302358420.7858689, "message": "python_chatbot_testing: 20\npython_chatbot: 10", "group_id": 8628, "id": 602397}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302358420.927768, "message": "issackelly: 10\ndpwiz: 10\njustinlilly: 10\ntbatterii: 10\npaulsmith: 10", "group_id": 8628, "id": 602398}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302358486.8745561, "message": "python_chatbot_testing: 20\npython_chatbot: 10", "group_id": 8628, "id": 602402}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302358487.0451529, "message": "issackelly: 10\ndpwiz: 10\njustinlilly: 10\ntbatterii: 10\npaulsmith: 10", "group_id": 8628, "id": 602403}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302359636.120362, "message": "issackelly: 20\ndpwiz: 20\njustinlilly: 10\ntbatterii: 10\npaulsmith: 10", "group_id": 8628, "id": 602453}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302359839.848882, "message": "issackelly: 20\ndpwiz: 20\njustinlilly: 10\ntbatterii: 10\npaulsmith: 10", "group_id": 8628, "id": 602463}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302360068.893837, "message": "issackelly: 20\ndpwiz: 20\njustinlilly: 10\ntbatterii: 10\npaulsmith: 10", "group_id": 8628, "id": 602480}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302359955.377743, "message": "issackelly: 20\ndpwiz: 20\njustinlilly: 10\ntbatterii: 10\npaulsmith: 10", "group_id": 8628, "id": 602474}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302359635.3171811, "message": "/karma llimllib", "group_id": 8628, "id": 602452}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302359742.300437, "message": "/karma llimllib", "group_id": 8628, "id": 602455}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302359743.138294, "message": "issackelly: 20\ndpwiz: 20\njustinlilly: 10\ntbatterii: 10\npaulsmith: 10", "group_id": 8628, "id": 602456}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302359743.144804, "message": "Unable to find user llimllib", "group_id": 8628, "id": 602457}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302359824.4787979, "message": "/karma python_chatbot", "group_id": 8628, "id": 602459}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302359825.275197, "message": "issackelly: 20\ndpwiz: 20\njustinlilly: 10\ntbatterii: 10\npaulsmith: 10", "group_id": 8628, "id": 602460}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302359838.996706, "message": "/karma python_chatbot", "group_id": 8628, "id": 602462}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302359839.8920851, "message": "python_chatbot: [(10,)]", "group_id": 8628, "id": 602464}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302360067.9236159, "message": "The top 5 users by karma are:\npython_chatbot_testing: 20\npython_chatbot: 10", "group_id": 8628, "id": 602479}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302359872.248714, "message": "/karma python_chatbot", "group_id": 8628, "id": 602466}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302359873.047719, "message": "issackelly: 20\ndpwiz: 20\njustinlilly: 10\ntbatterii: 10\npaulsmith: 10", "group_id": 8628, "id": 602467}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302359873.075124, "message": "python_chatbot: 10", "group_id": 8628, "id": 602468}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302359881.867563, "message": "/karma llimllib", "group_id": 8628, "id": 602469}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302359883.1441889, "message": "issackelly: 20\ndpwiz: 20\njustinlilly: 10\ntbatterii: 10\npaulsmith: 10", "group_id": 8628, "id": 602470}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302359955.379802, "message": "Unable to find user None", "group_id": 8628, "id": 602475}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302359883.758992, "message": "Unable to find user llimllib", "group_id": 8628, "id": 602471}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302359954.5324831, "message": "/karma", "group_id": 8628, "id": 602473}, {"user_id": 13912, "stars": [], "topic_id": 18115, "date_created": 1302372981.8203809, "message": "/help django.forms.models", "group_id": 8628, "id": 603822}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302375698.051825, "message": "/doc django.forms.models", "group_id": 8628, "id": 604697}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302375701.762661, "message": "Python Library Documentation: module django.forms.models in django.forms\n\nNAME\n    django.forms.models\n\nFILE\n    /usr/local/Cellar/python/2.7.1/lib/python2.7/site-packages/django/forms/models.py\n\nDESCRIPTION\n    Helper functions for creating Form classes from Django models\n    and database field objects.\n\nCLASSES\n    django.forms.fields.ChoiceField(django.forms.fields.Field)\n        ModelChoiceField\n            ModelMultipleChoiceField\n    django.forms.forms.BaseForm(django.utils.encoding.StrAndUnicode)\n        BaseModelForm\n            ModelForm\n    \n<truncated>  http://readthedocs.org/search/?q=django.forms.models", "group_id": 8628, "id": 604698}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302376073.450686, "message": "/eval zip(*[[1,2],[1,2]])", "group_id": 8628, "id": 604763}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302376101.960917, "message": "The 5 users with the highest karma are:\npython_chatbot_testing: 20\npython_chatbot: 10", "group_id": 8628, "id": 604774}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302375821.877157, "message": "/eval 1+2", "group_id": 8628, "id": 604718}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302376059.8986199, "message": "3", "group_id": 8628, "id": 604762}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302377147.3193049, "message": "/help karma", "group_id": 8628, "id": 604990}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302377149.0462811, "message": "The 5 users with the highest karma are:\nissackelly: 20\ndpwiz: 20\nllimllib: 20\nmikegraham: 20\njustinlilly: 10", "group_id": 8628, "id": 604992}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302376058.9802859, "message": "/eval 1+2", "group_id": 8628, "id": 604761}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302376099.956501, "message": "The python chatbot currently implements these commands:\n/karma: who in the python group has the most karma?\n/doc <something>: return python 2.7's documentation for <something>\n/rtd <module> <function>: return a link to readthedocs for <module> and/or <function>\n/zen:", "group_id": 8628, "id": 604771}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302376673.388211, "message": "/help karma", "group_id": 8628, "id": 604893}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302376894.014832, "message": "/help karma", "group_id": 8628, "id": 604931}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302377129.294193, "message": "Sorry, could not find help on k", "group_id": 8628, "id": 604984}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302376100.390866, "message": "The python chatbot currently implements these commands:\n/eval <expression>: use a restricted python environment to return the result of <expression>\n/karma: who in the python group has the most karma?\n/doc <something>: return python 2.7's documentation for <something>\n/rtd <module> <function>: return a link to readthedocs for <module> and/or <function>\n/zen:", "group_id": 8628, "id": 604772}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302376128.7055049, "message": "/help eval", "group_id": 8628, "id": 604781}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302376941.401046, "message": "/help karma", "group_id": 8628, "id": 604946}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302378087.072798, "message": "/eval <expression>: use a restricted python environment to return the result of <expression>\n\nExamples:\n\n/eval 1+2\n3\n\n/eval zip(*[[1,2],[3,4]])\n[(1,3), (2,4)]", "group_id": 8628, "id": 605092}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302375840.9029529, "message": "1+2", "group_id": 8628, "id": 604721}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302376074.4965789, "message": "[(1, 1), (2, 2)]", "group_id": 8628, "id": 604764}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302376099.10776, "message": "/help", "group_id": 8628, "id": 604770}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302376101.5450389, "message": "The 5 users with the highest karma are:\nissackelly: 20\ndpwiz: 20\nllimllib: 20\nmikegraham: 20\njustinlilly: 10", "group_id": 8628, "id": 604773}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302377128.33534, "message": "/help karma", "group_id": 8628, "id": 604983}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302377910.203908, "message": "/eval 1+2", "group_id": 8628, "id": 605067}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302378085.648397, "message": "/help eval", "group_id": 8628, "id": 605091}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302378096.1852729, "message": "The python chatbot currently implements these commands:\n/doc <something>: return python 2.7's documentation for <something>\n/eval <expression>: use a restricted python environment to return the result of <expression>\n/karma: who in the python group has the most karma?\n/rtd <module> <function>: return a link to readthedocs for <module> and/or <function>\n/zen:", "group_id": 8628, "id": 605096}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302377148.222157, "message": "/karma: who in the python group has the most karma?", "group_id": 8628, "id": 604991}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302378094.903553, "message": "/help", "group_id": 8628, "id": 605095}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302377156.7228601, "message": "/help eval", "group_id": 8628, "id": 604994}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302377158.205847, "message": "/eval <expression>: use a restricted python environment to return the result of <expression>\n\nExamples:\n\n/eval 1+2\n3\n\n/eval zip(*[[1,2],[3,4]])\n[(1,3), (2,4)]", "group_id": 8628, "id": 604995}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302378079.4847021, "message": "/eval 1+2", "group_id": 8628, "id": 605089}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302378120.8194611, "message": "/eval zip(*[[1,1],[2,2]])", "group_id": 8628, "id": 605101}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302378122.09443, "message": "[(1, 2), (1, 2)]", "group_id": 8628, "id": 605102}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302378080.3267441, "message": "3", "group_id": 8628, "id": 605090}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302383554.0554581, "message": "Error running code", "group_id": 8628, "id": 605538}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302383551.6777451, "message": "/eval math.floor(4.1)", "group_id": 8628, "id": 605536}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302384748.8449049, "message": "<module 'sys' (built-in)>", "group_id": 8628, "id": 605692}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302383858.718986, "message": "Error running code", "group_id": 8628, "id": 605566}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302383870.5575571, "message": "/eval math.floor(4.1)", "group_id": 8628, "id": 605569}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302383900.282578, "message": "Error running code", "group_id": 8628, "id": 605578}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302383611.396698, "message": "The 5 users with the highest karma are:\nllimllib: 40\nissackelly: 20\ndpwiz: 20\nmikegraham: 20\njustinlilly: 10", "group_id": 8628, "id": 605548}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302383858.672811, "message": "Error running code", "group_id": 8628, "id": 605565}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302383871.38344, "message": "Error running code", "group_id": 8628, "id": 605570}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302383881.3221951, "message": "Error running code", "group_id": 8628, "id": 605573}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302383553.4588051, "message": "Error running code", "group_id": 8628, "id": 605537}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302383899.448493, "message": "/eval math.floor(4.1)\n", "group_id": 8628, "id": 605576}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302383610.5945849, "message": "/karma", "group_id": 8628, "id": 605547}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302383698.343292, "message": "/karma", "group_id": 8628, "id": 605554}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302384725.911706, "message": "/eval os", "group_id": 8628, "id": 605686}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302384747.618185, "message": "/eval sys", "group_id": 8628, "id": 605690}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302384726.7418549, "message": "Error running code", "group_id": 8628, "id": 605687}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302384759.327631, "message": "Error running code", "group_id": 8628, "id": 605695}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302383699.1635001, "message": "The 5 users with the highest karma are:\nllimllib: 40\nissackelly: 20\ndpwiz: 20\nmikegraham: 20\njustinlilly: 10", "group_id": 8628, "id": 605555}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302383880.4685941, "message": "/eval math.floor(4.1)\n", "group_id": 8628, "id": 605572}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302383881.3524129, "message": "Error running code", "group_id": 8628, "id": 605574}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302383900.2660949, "message": "Error running code", "group_id": 8628, "id": 605577}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302384276.1227951, "message": "2.7.1 (r271:86832, Feb 28 2011, 14:19:32) \n[GCC 4.2.1 (Apple Inc. build 5664)]", "group_id": 8628, "id": 605618}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302383857.849575, "message": "/eval math.floor(4.1)", "group_id": 8628, "id": 605564}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302385278.8456559, "message": "/eval os.listdir('.')", "group_id": 8628, "id": 605727}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302385280.3529949, "message": "Error running code", "group_id": 8628, "id": 605729}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302384275.2836671, "message": "/eval sys.version", "group_id": 8628, "id": 605617}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302384276.2056799, "message": "Error running code", "group_id": 8628, "id": 605619}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302384726.7563231, "message": "Error running code", "group_id": 8628, "id": 605688}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302384748.4395361, "message": "Error running code", "group_id": 8628, "id": 605691}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302384758.5021, "message": "/eval traceback", "group_id": 8628, "id": 605694}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302384759.7320859, "message": "<module 'traceback' from '/usr/local/Cellar/python/2.7.1/lib/python2.7/traceback.pyc'>", "group_id": 8628, "id": 605697}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302385279.680115, "message": "Error running code", "group_id": 8628, "id": 605728}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302407662.0727899, "message": "Error running code", "group_id": 8628, "id": 607820}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302402366.922426, "message": "[(1, 4), (1, 5), (1, 6), (2, 4), (2, 5), (2, 6), (3, 4), (3, 5), (3, 6)]", "group_id": 8628, "id": 607521}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302402440.7825251, "message": "Error running code", "group_id": 8628, "id": 607528}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302402475.36325, "message": "Error running code", "group_id": 8628, "id": 607531}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302402881.4246299, "message": "Error running code", "group_id": 8628, "id": 607565}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302402402.934058, "message": "Error running code", "group_id": 8628, "id": 607524}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402198.136806, "message": "/eval __import__('os')", "group_id": 8628, "id": 607510}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302402199.7324159, "message": "Error running code", "group_id": 8628, "id": 607512}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302402344.4908161, "message": "4.0", "group_id": 8628, "id": 607518}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302402847.9267559, "message": "Error running code", "group_id": 8628, "id": 607560}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402091.6161489, "message": "/eval taceback", "group_id": 8628, "id": 607500}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302403056.5881, "message": "/eval 'ubbenl, abg oebxra lrg :)'.decode('rot13')\n", "group_id": 8628, "id": 607579}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402178.8168161, "message": "/eval import os; os.listdir('.')", "group_id": 8628, "id": 607506}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302402179.7068241, "message": "Error running code", "group_id": 8628, "id": 607508}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402343.8568039, "message": "/eval math.floor(4.1)", "group_id": 8628, "id": 607517}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402419.887588, "message": "/eval __import__(\"this\")", "group_id": 8628, "id": 607525}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402488.4215269, "message": "/eval __builtins__['__import__'](\"os\")", "group_id": 8628, "id": 607532}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302402092.440702, "message": "Error running code", "group_id": 8628, "id": 607501}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402111.8871989, "message": "/eval zip(*[[1,1],[2,2]])", "group_id": 8628, "id": 607503}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302402112.7739911, "message": "[(1, 2), (1, 2)]", "group_id": 8628, "id": 607505}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402847.255758, "message": "/eval 'ubbenl, abg oebxra lrg :)'.decode('rot13')\n", "group_id": 8628, "id": 607558}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302402847.9241381, "message": "Error running code", "group_id": 8628, "id": 607559}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402066.2132349, "message": "/eval traceback", "group_id": 8628, "id": 607497}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302402067.0115061, "message": "Error running code", "group_id": 8628, "id": 607498}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302402179.4819901, "message": "Error running code", "group_id": 8628, "id": 607507}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302402198.839901, "message": "Error running code", "group_id": 8628, "id": 607511}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402365.899483, "message": "/eval [(i,j) for i in [1,2,3] for j in [4,5,6]]", "group_id": 8628, "id": 607520}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402402.074389, "message": "/eval 1/0", "group_id": 8628, "id": 607523}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302402420.515058, "message": "Error running code", "group_id": 8628, "id": 607526}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402439.7259121, "message": "/eval exit(0)", "group_id": 8628, "id": 607527}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402474.516726, "message": "/eval __builtins__['__import__'].func_code", "group_id": 8628, "id": 607530}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302402489.572093, "message": "Error running code", "group_id": 8628, "id": 607533}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402524.366097, "message": "/eval 'ubbenl, abg oebxra lrg :)'.decode('rot13')", "group_id": 8628, "id": 607534}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302403057.222019, "message": "Error running code", "group_id": 8628, "id": 607580}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302403072.567379, "message": "/eval math.floor(4.1)", "group_id": 8628, "id": 607584}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302403073.195061, "message": "4.0", "group_id": 8628, "id": 607585}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302402524.9965529, "message": "Error running code", "group_id": 8628, "id": 607535}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302402901.745383, "message": "Error running code", "group_id": 8628, "id": 607568}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302403057.4372261, "message": "Error running code", "group_id": 8628, "id": 607581}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302403248.146013, "message": "Error running code", "group_id": 8628, "id": 607595}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402880.7240591, "message": "/eval 'ubbenl, abg oebxra lrg :)'.decode('rot13')\n", "group_id": 8628, "id": 607563}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302402881.3791809, "message": "Error running code", "group_id": 8628, "id": 607564}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302402901.0760641, "message": "/eval 'ubbenl, abg oebxra lrg :)'.decode('rot13')", "group_id": 8628, "id": 607566}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302402901.6882279, "message": "Error running code", "group_id": 8628, "id": 607567}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302403636.5335381, "message": "Error running code", "group_id": 8628, "id": 607613}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302403073.4259019, "message": "4.0", "group_id": 8628, "id": 607586}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302403247.282007, "message": "/eval 'ubbenl, abg oebxra lrg :)'.decode('rot13')\n", "group_id": 8628, "id": 607593}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302403247.9765251, "message": "Error running code", "group_id": 8628, "id": 607594}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302403636.5396149, "message": "Error running code", "group_id": 8628, "id": 607614}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302403635.7129819, "message": "/eval 'ubbenl, abg oebxra lrg :)'.decode('rot13')\n", "group_id": 8628, "id": 607612}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302407661.246346, "message": "/eval u'\u00e9'", "group_id": 8628, "id": 607819}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302407947.200052, "message": "/karma", "group_id": 8628, "id": 607828}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302407948.3219919, "message": "The 5 users with the highest karma are:\nllimllib: 40\nericholscher: 40\nissackelly: 20\ndpwiz: 20\nmikegraham: 20", "group_id": 8628, "id": 607829}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302407948.474122, "message": "The 5 users with the highest karma are:\npython_chatbot_testing: 20\npython_chatbot: 10", "group_id": 8628, "id": 607830}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302407974.3550949, "message": "/karma ericholscher", "group_id": 8628, "id": 607832}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302407627.7921889, "message": "/eval u'\u00e9'", "group_id": 8628, "id": 607815}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302407628.619935, "message": "Error running code", "group_id": 8628, "id": 607816}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302407923.486794, "message": "\u00e9", "group_id": 8628, "id": 607826}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302407628.6980209, "message": "Error running code", "group_id": 8628, "id": 607817}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302407662.0836639, "message": "Error running code", "group_id": 8628, "id": 607821}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302407922.3891721, "message": "/eval u'\u00e9'", "group_id": 8628, "id": 607824}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302407923.4184749, "message": "Error running code", "group_id": 8628, "id": 607825}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302409200.81777, "message": "Error running code", "group_id": 8628, "id": 607884}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302408281.320349, "message": "/eval \"testing\".encode('rot13')", "group_id": 8628, "id": 607862}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302410103.9454141, "message": "/help", "group_id": 8628, "id": 607906}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302407975.6779799, "message": "ericholscher: 40", "group_id": 8628, "id": 607833}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302407975.9466281, "message": "Unable to find user ericholscher", "group_id": 8628, "id": 607834}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302408149.7079201, "message": "/eval u'\u00e9'", "group_id": 8628, "id": 607844}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302408151.0934601, "message": "\u00e9", "group_id": 8628, "id": 607845}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302408282.2024901, "message": "Error running code", "group_id": 8628, "id": 607863}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302409200.82623, "message": "Error running code", "group_id": 8628, "id": 607885}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302409200.002733, "message": "/eval \"testing\".encode(\"rot13\")", "group_id": 8628, "id": 607883}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302409701.0044839, "message": "/eval math.floor(3.4)", "group_id": 8628, "id": 607899}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302409701.8699739, "message": "3.0", "group_id": 8628, "id": 607900}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302410104.76442, "message": "The python chatbot currently implements these commands:\n/doc <something>: return python 2.7's documentation for <something>\n/eval <expression>: use a restricted python environment to return the result of <expression>\n/karma: who in the python group has the most karma?\n/rtd <module> <function>: return a link to readthedocs for <module> and/or <function>\n/zen:", "group_id": 8628, "id": 607907}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302444454.5706921, "message": "Error running code", "group_id": 8628, "id": 609593}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302444564.754319, "message": "Error running code", "group_id": 8628, "id": 609603}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302444609.5001211, "message": "/eval __import__(\"sys\")\n", "group_id": 8628, "id": 609607}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302444411.7582159, "message": "/eval eval('class foo(object): pass')", "group_id": 8628, "id": 609586}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302444453.511564, "message": "/eval eval(\"os=__import__('os')\")", "group_id": 8628, "id": 609592}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302444563.9528799, "message": "/eval (lambda f: f(f))(lambda f: f(f))\n", "group_id": 8628, "id": 609602}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302444610.293726, "message": "Error running code", "group_id": 8628, "id": 609608}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302444412.600729, "message": "Error running code", "group_id": 8628, "id": 609587}, {"user_id": 28212, "stars": [], "topic_id": 18115, "date_created": 1302445215.0395269, "message": "The 5 users with the highest karma are:\nericholscher: 50\nllimllib: 40\nissackelly: 20\ndpwiz: 20\nmikegraham: 20", "group_id": 8628, "id": 609668}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302445214.2117591, "message": "/karma", "group_id": 8628, "id": 609665}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302454355.657716, "message": "Error running code", "group_id": 8628, "id": 610859}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302454440.7362089, "message": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221,", "group_id": 8628, "id": 610893}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302454409.6953039, "message": "/eval [x for x in range(100000)]", "group_id": 8628, "id": 610881}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302454410.8381431, "message": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999]", "group_id": 8628, "id": 610882}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302454439.7346001, "message": "/eval [x for x in range(10000)]", "group_id": 8628, "id": 610892}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302454460.934473, "message": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,", "group_id": 8628, "id": 610903}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302454607.764411, "message": "/eval [x for x in range(10000)]", "group_id": 8628, "id": 610957}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302454608.611115, "message": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121,...", "group_id": 8628, "id": 610958}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302454236.8406789, "message": "/eval [x for x in range(1000000)]", "group_id": 8628, "id": 610834}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302454460.054543, "message": "/eval [x for x in range(10000)]", "group_id": 8628, "id": 610901}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302454671.532387, "message": "/eval [x*100000000 for x in range(10000, 1000000000)]\n", "group_id": 8628, "id": 610977}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302454992.3717511, "message": "/eval [x*1000 for x in range(10000, 100000)]", "group_id": 8628, "id": 611053}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302454997.6265781, "message": "Error running code", "group_id": 8628, "id": 611055}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302455922.5508471, "message": "[10000000, 10001000, 10002000, 10003000, 10004000, 10005000, 10006000, 10007000, 10008000, 10009000, 10010000, 10011000, 10012000, 10013000, 10014000, 10015000, 10016000, 10017000, 10018000, 10019000, 10020000, 10021000, 10022000, 10023000, 10024000, 10025000, 10026000, 10027000, 10028000, 10029000, 10030000, 10031000, 10032000, 10033000, 10034000, 10035000, 10036000, 10037000, 10038000, 10039000, 10040000, 10041000, 10042000, 10043000, 10044000, 10045000, 10046000, 10047000, 10048000, 10049000, ...", "group_id": 8628, "id": 611318}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302455936.9472599, "message": "[20000000, 20002000, 20004000, 20006000, 20008000, 20010000, 20012000, 20014000, 20016000, 20018000, 20020000, 20022000, 20024000, 20026000, 20028000, 20030000, 20032000, 20034000, 20036000, 20038000, 20040000, 20042000, 20044000, 20046000, 20048000, 20050000, 20052000, 20054000, 20056000, 20058000, 20060000, 20062000, 20064000, 20066000, 20068000, 20070000, 20072000, 20074000, 20076000, 20078000, 20080000, 20082000, 20084000, 20086000, 20088000, 20090000, 20092000, 20094000, 20096000, 20098000, ...", "group_id": 8628, "id": 611324}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302455951.611002, "message": "/eval [x*1000 for x in range(10000, 10000000)]\n", "group_id": 8628, "id": 611332}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302455921.6773989, "message": "/eval [x*1000 for x in range(10000, 100000)]\n", "group_id": 8628, "id": 611317}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302455967.79603, "message": "/eval [x*1000 for x in range(10000, 1000000000)]\n", "group_id": 8628, "id": 611341}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302455935.8289061, "message": "/eval [x*2000 for x in range(10000, 100000)]\n", "group_id": 8628, "id": 611323}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302455944.6433489, "message": "/eval [x*1000 for x in range(10000, 1000000)]\n", "group_id": 8628, "id": 611329}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302455946.580816, "message": "[10000000, 10001000, 10002000, 10003000, 10004000, 10005000, 10006000, 10007000, 10008000, 10009000, 10010000, 10011000, 10012000, 10013000, 10014000, 10015000, 10016000, 10017000, 10018000, 10019000, 10020000, 10021000, 10022000, 10023000, 10024000, 10025000, 10026000, 10027000, 10028000, 10029000, 10030000, 10031000, 10032000, 10033000, 10034000, 10035000, 10036000, 10037000, 10038000, 10039000, 10040000, 10041000, 10042000, 10043000, 10044000, 10045000, 10046000, 10047000, 10048000, 10049000, ...", "group_id": 8628, "id": 611330}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302455957.443815, "message": "[10000000, 10001000, 10002000, 10003000, 10004000, 10005000, 10006000, 10007000, 10008000, 10009000, 10010000, 10011000, 10012000, 10013000, 10014000, 10015000, 10016000, 10017000, 10018000, 10019000, 10020000, 10021000, 10022000, 10023000, 10024000, 10025000, 10026000, 10027000, 10028000, 10029000, 10030000, 10031000, 10032000, 10033000, 10034000, 10035000, 10036000, 10037000, 10038000, 10039000, 10040000, 10041000, 10042000, 10043000, 10044000, 10045000, 10046000, 10047000, 10048000, 10049000, ...", "group_id": 8628, "id": 611334}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302485305.6414549, "message": "/karma", "group_id": 8628, "id": 616524}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302566424.1808529, "message": "https://gist.github.com/913936", "group_id": 8628, "id": 632326}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302662159.1678309, "message": "foooo", "group_id": 8628, "id": 655356}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302662132.4283731, "message": "bananaphone", "group_id": 8628, "id": 655343}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302662299.628098, "message": "xyzzy", "group_id": 8628, "id": 655419}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302663362.1130209, "message": "!jason", "group_id": 8628, "id": 655882}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302661921.7430151, "message": "bananas", "group_id": 8628, "id": 655264}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302662137.1731639, "message": "hooray", "group_id": 8628, "id": 655345}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302662157.5883, "message": "boo", "group_id": 8628, "id": 655355}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302662160.0063529, "message": "bar", "group_id": 8628, "id": 655357}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302662188.3946841, "message": "bah", "group_id": 8628, "id": 655370}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302662319.0774059, "message": "zzyy", "group_id": 8628, "id": 655435}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302662554.0944581, "message": "!jason", "group_id": 8628, "id": 655549}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302662315.9227741, "message": "razz", "group_id": 8628, "id": 655431}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302663671.6986871, "message": "!jason", "group_id": 8628, "id": 656003}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302663865.7262499, "message": "!imgur", "group_id": 8628, "id": 656087}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302663869.5923049, "message": "the imgur plugin threw an exception", "group_id": 8628, "id": 656089}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302664838.9242511, "message": "!imgur", "group_id": 8628, "id": 656458}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302664864.5003779, "message": "!imgur", "group_id": 8628, "id": 656468}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302664841.56302, "message": "the imgur plugin threw an exception", "group_id": 8628, "id": 656459}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302664168.893177, "message": "!imgur", "group_id": 8628, "id": 656220}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302664867.3958769, "message": "the imgur plugin threw an exception", "group_id": 8628, "id": 656470}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302665471.0884049, "message": "!imgur", "group_id": 8628, "id": 656665}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302665507.322684, "message": "!imgur", "group_id": 8628, "id": 656687}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302665372.8799651, "message": "!imgur", "group_id": 8628, "id": 656628}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302663551.9404759, "message": "!jason", "group_id": 8628, "id": 655967}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302663675.28425, "message": "http://i.imgur.com/O1nYo.jpg", "group_id": 8628, "id": 656005}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302665432.786449, "message": "!imgur", "group_id": 8628, "id": 656655}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302663971.2551689, "message": "!imgur", "group_id": 8628, "id": 656120}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302665989.329922, "message": "http://i.imgur.com/ITUH3.jpg", "group_id": 8628, "id": 656831}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302664172.225069, "message": "the imgur plugin threw an exception", "group_id": 8628, "id": 656223}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302665468.492996, "message": "!imgur", "group_id": 8628, "id": 656663}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302665984.2226801, "message": "!imgur", "group_id": 8628, "id": 656828}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302664924.8827579, "message": "!imgur", "group_id": 8628, "id": 656499}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302879685.673697, "message": "/pep 8", "group_id": 8628, "id": 701106}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302878668.57236, "message": "/pep 392", "group_id": 8628, "id": 700803}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302878669.7594309, "message": "PEP: 392\nTitle: Python 3.2 Release Schedule\nVersion: bd1b4ab24665\nLast-Modified: \nAuthor: Georg Brandl <georg&#32;&#97;t&#32;python.org>\nStatus: Active\nType: Informational\nContent-Type: \nCreated: 30-Dec-2009\nPython-Version: 3.2\nhttp://www.python.org/dev/peps/pep-0392/", "group_id": 8628, "id": 700804}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302878815.36801, "message": "/pep 8", "group_id": 8628, "id": 700841}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302878833.4411831, "message": "/pep 8", "group_id": 8628, "id": 700847}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302878637.5628369, "message": "/pep 8", "group_id": 8628, "id": 700798}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302878834.669692, "message": "None: None\nNone: None\nNone: None\nNone: None\nNone: None\nNone: None\nNone: None\nNone: None\nNone: None\nhttp://www.python.org/dev/peps/pep-0008/", "group_id": 8628, "id": 700848}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302878638.6711409, "message": "PEP: 8\nTitle: Style Guide for Python Code\nVersion: 64bda015861d\nLast-Modified: \nAuthor: Guido van Rossum <guido&#32;&#97;t&#32;python.org>, Barry Warsaw <barry&#32;&#97;t&#32;python.org>\nStatus: Active\nType: Process\nCreated: 05-Jul-2001\nPost-History: 05-Jul-2001http://www.python.org/dev/peps/pep-0008/", "group_id": 8628, "id": 700799}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302879624.860002, "message": "/pep 8", "group_id": 8628, "id": 701093}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302879626.0231099, "message": "PEP: 8\nTitle: Style Guide for Python Code\nVersion: 64bda015861d\nLast-Modified: \nAuthor: Guido van Rossum <guido at python.org>, Barry Warsaw <barry at python.org>\nStatus: Active\nType: Process\nCreated: 05-Jul-2001\nPost-History: 05-Jul-2001\nhttp://www.python.org/dev/peps/pep-0008/", "group_id": 8628, "id": 701094}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1302878849.7690289, "message": "/pep 8", "group_id": 8628, "id": 700852}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302878851.0153079, "message": "PEP: 8\nTitle: Style Guide for Python Code\nVersion: 64bda015861d\nLast-Modified: \nAuthor: Guido van Rossum <guido at python.org>, Barry Warsaw <barry at python.org>\nStatus: Active\nType: Process\nCreated: 05-Jul-2001\nPost-History: 05-Jul-2001\nhttp://www.python.org/dev/peps/pep-0008/", "group_id": 8628, "id": 700853}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1302879686.6684239, "message": "PEP: 8\nTitle: Style Guide for Python Code\nVersion: 64bda015861d\nLast-Modified: \nAuthor: Guido van Rossum <guido at python.org>, Barry Warsaw <barry at python.org>\nStatus: Active\nType: Process\nCreated: 05-Jul-2001\nPost-History: 05-Jul-2001\nhttp://www.python.org/dev/peps/pep-0008/", "group_id": 8628, "id": 701108}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1304099791.820426, "message": "longer and harder", "group_id": 8628, "id": 860441}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1304099836.7641189, "message": "have sex with me", "group_id": 8628, "id": 860454}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1304099846.6698711, "message": "(I'm testing twss, in case you're wondering)", "group_id": 8628, "id": 860457}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1304099911.83306, "message": "!stats", "group_id": 8628, "id": 860476}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1304099847.2126651, "message": "That's what she said", "group_id": 8628, "id": 860458}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1304099776.7028949, "message": "!stats", "group_id": 8628, "id": 860435}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1304099777.329047, "message": "Link stats:\n--------------------------", "group_id": 8628, "id": 860436}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1304099852.0707829, "message": "hahaha", "group_id": 8628, "id": 860459}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1304099912.4254329, "message": "Link stats:\n--------------------------", "group_id": 8628, "id": 860477}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1304967149.4497099, "message": "http://www.theonion.com/articles/on-commissioner-goodell-being-booed-mercilessly-th,20342/", "group_id": 8628, "id": 975677}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1304967154.2989309, "message": "!onion", "group_id": 8628, "id": 975678}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1304967155.1477611, "message": "http://www.theonion.com/articles/worlds-longest-wall-completed,20211/", "group_id": 8628, "id": 975679}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1304967148.4015701, "message": "!onion", "group_id": 8628, "id": 975676}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1305045906.9438729, "message": "/eval 1+1", "group_id": 8628, "id": 992690}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1305045950.1384959, "message": "which is at https://github.com/markolson/linkbot", "group_id": 8628, "id": 992700}, {"user_id": 28253, "stars": [], "topic_id": 18115, "date_created": 1305045907.6703961, "message": "2", "group_id": 8628, "id": 992691}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1305045927.114429, "message": "The other testing stuff in here is for my other bot, written in ruby and designed for my work chatroom", "group_id": 8628, "id": 992694}, {"user_id": 1284, "stars": [], "topic_id": 18115, "date_created": 1305045967.7002089, "message": "so don't be surprised when !onion doesn't do anything :)", "group_id": 8628, "id": 992710}]