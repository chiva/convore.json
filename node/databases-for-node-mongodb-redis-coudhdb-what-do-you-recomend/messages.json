[{"user_id": 1175, "stars": [], "topic_id": 13277, "date_created": 1300660101.054208, "message": "well, what's your use case?", "group_id": 1020, "id": 394094}, {"user_id": 12179, "stars": [], "topic_id": 13277, "date_created": 1300711051.813421, "message": "For two small projects I use redis. It perfectly fits my needs: storing some of my data as a string value only referenced by a key. And it's small, fast and easy to use with node", "group_id": 1020, "id": 397395}, {"user_id": 2969, "stars": [{"date_created": 1301166192.6886251, "user_id": 2341}, {"date_created": 1301605170.659934, "user_id": 346}], "topic_id": 13277, "date_created": 1300733651.091588, "message": "redis for realtime and caching. couchdb for everything else. use matt ranney's redis client. for couchdb i don't use an abstraction, i just use the request library for raw HTTP.", "group_id": 1020, "id": 401370}, {"user_id": 7880, "stars": [], "topic_id": 13277, "date_created": 1301235062.987721, "message": "Say I'm building a blog. What would be the best database to use?", "group_id": 1020, "id": 451137}, {"user_id": 8224, "stars": [], "topic_id": 13277, "date_created": 1301254465.8481779, "message": "I personally like mongodb.  The blog thing works pretty well when you store each post/comments/meta in a single document.", "group_id": 1020, "id": 452484}, {"user_id": 1059, "stars": [], "topic_id": 13277, "date_created": 1301286878.1192451, "message": "@nerdyworms atomic subdoc updates make that so much better, too :)", "group_id": 1020, "id": 454936}, {"user_id": 23025, "stars": [], "topic_id": 13277, "date_created": 1301569304.0978589, "message": "I am using mongodb because it's very simple to use it, mongoosejs.com library for working via nodejs.", "group_id": 1020, "id": 490706}, {"user_id": 28328, "stars": [], "topic_id": 13277, "date_created": 1302348938.3046789, "message": "I like mongoDB so much...", "group_id": 1020, "id": 601781}, {"user_id": 20536, "stars": [], "topic_id": 13277, "date_created": 1302418340.4265981, "message": "@crazy_google why do you like it? why do you use it for?", "group_id": 1020, "id": 608263}, {"user_id": 17546, "stars": [], "topic_id": 13277, "date_created": 1302429295.1563799, "message": "@Siedrix not @crazy_google but I've been using mongoDB on a few projects, I chose it for two main reasons: Plays extremely well with node.js and the document based system suited my projects well (Actually a couple of them are projects I didn't want to tackle with a relational datastore at all, so MongoDB revived these ideas.)", "group_id": 1020, "id": 608643}, {"user_id": 17546, "stars": [], "topic_id": 13277, "date_created": 1302429326.4762321, "message": "Also check out this from the wiki: http://www.mongodb.org/display/DOCS/Use+Cases", "group_id": 1020, "id": 608646}, {"user_id": 12020, "stars": [], "topic_id": 13277, "date_created": 1302487919.721282, "message": "@mikeal Why not CouchDB for realtime? I\u2019m considering using the _changes stream of CouchDB to implement an international realtime app. So far it seems to be able to do that kind of stuff\u2014there\u2019s not much latency. Any comments on that? I have no prior experience with CouchDB, so any input is appreciated.", "group_id": 1020, "id": 617041}, {"user_id": 14931, "stars": [], "topic_id": 13277, "date_created": 1302553662.570847, "message": "CouchDB's changes feed is a great way to deal with realtime updates.  Keep in mind the impact on latency as your database size grows.  It's worth testing with very large databases to make sure it is still fast enough.", "group_id": 1020, "id": 629371}, {"user_id": 28737, "stars": [], "topic_id": 13277, "date_created": 1302618300.427479, "message": "Let's not forget good ol' postgres.", "group_id": 1020, "id": 643207}, {"user_id": 14931, "stars": [], "topic_id": 13277, "date_created": 1302675159.7688811, "message": "Thanks to @brianc's driver, postgres is a pretty good option for node.", "group_id": 1020, "id": 660022}, {"user_id": 20536, "stars": [], "topic_id": 13277, "date_created": 1302676465.5143299, "message": "@brianc in what cases would you recommend postgres over mongodb or couchdb?", "group_id": 1020, "id": 660420}, {"user_id": 15929, "stars": [], "topic_id": 13277, "date_created": 1302677109.7802219, "message": "@Siedrix when you need relational database? I thought it was pretty obvious... :S", "group_id": 1020, "id": 660549}, {"user_id": 1855, "stars": [], "topic_id": 13277, "date_created": 1302696227.4988561, "message": "when you don't need web scale ;P", "group_id": 1020, "id": 663566}, {"user_id": 28737, "stars": [], "topic_id": 13277, "date_created": 1302788035.1190791, "message": "@mranney thanks. ;)", "group_id": 1020, "id": 684579}, {"user_id": 28737, "stars": [], "topic_id": 13277, "date_created": 1302788407.9120319, "message": "@Siedrix there are many cases...primarily when you have relational data.  Or you need transactional integrity.  One common example is when you're writing a billing/invoicing system...  Or you're working with a legacy system which uses Postgres.  I don't want to start an SQL v NoSQL flame war...they both have their places.  One thing lacking from node are any mature ORM's so the experience of using postgres (or mysql) is not going to be as easy as coming from other ecosystems.  Hopefully we'll get that sorted out soon enough.", "group_id": 1020, "id": 684677}, {"user_id": 1527, "stars": [], "topic_id": 13277, "date_created": 1302854937.1240661, "message": "Slightly related to the ORM issue, I've used a Twisted server as my \"postgresql proxy\". I talk to it via high level API from Node.js (something like get_user_profile()). I'm more comfortable on using a decoupled approach", "group_id": 1020, "id": 697805}, {"user_id": 40578, "stars": [], "topic_id": 13277, "date_created": 1315005735.298136, "message": "ss", "group_id": 1020, "id": 2033189}]