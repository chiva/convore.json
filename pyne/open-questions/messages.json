[{"user_id": 10421, "stars": [], "topic_id": 20590, "date_created": 1303333055.9975281, "message": "What should be the name, namespace?\nWhat wrappers/bindings/dependencies to include?\nHow should we distribute it (pypi? with dependencies?) ?\nHow should we link things on a high level ? \nWhat conventions do we need to think about in the beginning?\nCan we get undergrads?\nFunding to license some solvers?\nWhat licenses should we use?\n", "group_id": 9127, "id": 761338}, {"user_id": 10411, "stars": [], "topic_id": 20590, "date_created": 1303333674.313699, "message": "I have 1 - 2 undergrads and another grad student to offer right now ;)", "group_id": 9127, "id": 761510}, {"user_id": 30469, "stars": [], "topic_id": 20590, "date_created": 1303364331.250596, "message": "What documentation generator to use (Sphinx, Epydoc, Doxygen, etc.)?", "group_id": 9127, "id": 766531}, {"user_id": 30471, "stars": [], "topic_id": 20590, "date_created": 1303390540.1897261, "message": "I use Doxygen, which works great for C++ but is somewhat lacking in Python support. I'd cast my vote for Sphinx based on what I've seen of it. (http://matplotlib.sourceforge.net/devel/documenting_mpl.html#documenting-matplotlib)", "group_id": 9127, "id": 769739}, {"user_id": 10411, "stars": [], "topic_id": 20590, "date_created": 1303400059.727613, "message": "@paul_romano  @sethrj Sphinx is the defacto python docs framework (epydoc being dead and gone).  However, Doxygen is much better for C/C++.   Given the mass of C code we'll have, it might actually be best to have both.  Sphinx being for the user, and Doxygen being for the developer that needs to go down to the C-level.   If I had to choose one, I'd go with sphinx.", "group_id": 9127, "id": 771373}, {"user_id": 30471, "stars": [], "topic_id": 20590, "date_created": 1303401179.28356, "message": "For what it's worth, I have some code that takes Doxygen-generated xml files and converts them into SWIG inputs that automatically get translated to (admittedly not terribly user-friendly) Python docstrings. It's handy if you want automatic Python documentation for wrapped C/C++ functions.", "group_id": 9127, "id": 771670}, {"user_id": 30471, "stars": [], "topic_id": 20590, "date_created": 1303405336.432965, "message": "Actually each of these \"open questions\" should probably have been a separate topic...", "group_id": 9127, "id": 772965}, {"user_id": 30471, "stars": [], "topic_id": 20590, "date_created": 1303405263.069438, "message": "How about what sort of common infrastructure do we need? For any non-zero-D simulation work you'll need some sort of mesh infrastructure. Do you want to do constructive solid geometry, or just start with simple 1-D/2-D cartesian? For Monte Carlo stuff, you'll want a suite of high-efficiency sampling routines. For reactor analysis, you'll want a common interface for cross section storage and retrieval.", "group_id": 9127, "id": 772949}, {"user_id": 30471, "stars": [], "topic_id": 20590, "date_created": 1303405312.00454, "message": "Also keep in mind that if you want high-performance solver kernels (for MC, SN, whatever) your data (mesh classes, cross section databases, etc.) will need to be accessible from the C++/Fortran side to avoid the Python overhead.", "group_id": 9127, "id": 772958}, {"user_id": 10411, "stars": [], "topic_id": 20590, "date_created": 1303434353.0696809, "message": "Let's break these out then", "group_id": 9127, "id": 777142}]