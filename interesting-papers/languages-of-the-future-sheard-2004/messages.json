[{"user_id": 4100, "stars": [], "topic_id": 4981, "date_created": 1297625670.364372, "message": "http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.5935", "group_id": 12, "id": 92950}, {"user_id": 4100, "stars": [], "topic_id": 4981, "date_created": 1297625680.3195441, "message": "Abstract: This paper explores a new point in the design space of formal reasoning systems - part programming language, part logical framework. The system is built on a programming language where the user expresses equality constraints between types and the type checker then enforces these constraints. This simple extension to the type system allows the programmer to describe properties of his program in the types of witness objects which can be thought of as concrete evidence that the program has the property desired. These techniques and two other rich typing mechanisms, rank-N polymorphism and extensible kinds, create a powerful new programming idiom for writing programs whose types enforce semantic properties. A language with these features is both a practical programming language and a logic. This marriage between two previously separate entities increases the probability that users will apply formal methods to their programming designs. This kind of synthesis creates the foundations for the languages of the future.", "group_id": 12, "id": 92951}, {"user_id": 6653, "stars": [], "topic_id": 4981, "date_created": 1297627957.1567991, "message": "While I certainly don't mean to imply it's on the same level as what the author describes in this paper (I haven't read beyond the abstract, after all, nor do I have the type theory or PL background to make this claim), but I'm immediately reminded of Mark Harrah's series on type-level programming in Scala: http://apocalisp.wordpress.com/2010/06/08/type-level-programming-in-scala/", "group_id": 12, "id": 93049}]