[{"user_id": 10074, "stars": [], "topic_id": 18890, "date_created": 1302611963.3481259, "message": "FYI Python 2.6", "group_id": 292, "id": 641537}, {"user_id": 7129, "stars": [{"date_created": 1302612954.937269, "user_id": 1284}, {"date_created": 1302613122.3843989, "user_id": 2810}, {"date_created": 1302659784.841393, "user_id": 5778}, {"date_created": 1302710701.206393, "user_id": 20326}], "topic_id": 18890, "date_created": 1302612944.6384301, "message": "Alternatively, change \"class a:\" to \"class a(object):\" and then call super(b, self).__init__(string)", "group_id": 292, "id": 641747}, {"user_id": 10074, "stars": [], "topic_id": 18890, "date_created": 1302611938.7587011, "message": "the __init__ from a is not called. I thought I have to write it in the b__init__ but i don't know how.", "group_id": 292, "id": 641531}, {"user_id": 10074, "stars": [], "topic_id": 18890, "date_created": 1302611895.092232, "message": "class a:\n    def __init__(self,string):\n        print string+\" a\"\n\nclass b(a):\n    def __init__(self,string):\n        print string+\" b\"\n        \nz = b(\"asd\")", "group_id": 292, "id": 641517}, {"user_id": 7129, "stars": [{"date_created": 1302612955.954293, "user_id": 1284}, {"date_created": 1302631352.1037941, "user_id": 1}], "topic_id": 18890, "date_created": 1302612912.9132349, "message": "You must call superconstructors manually. You are using old-style classes, so you should add a.__init__(self, string) to b's __init__.", "group_id": 292, "id": 641734}, {"user_id": 10074, "stars": [{"date_created": 1302618879.8057041, "user_id": 1284}], "topic_id": 18890, "date_created": 1302615021.6986389, "message": "Thank You very much. I always found the super() method, but it didn't work. And I was not sure If I'm allowed to change the super class.\nWhat does inherit from tobject?", "group_id": 292, "id": 642380}, {"user_id": 10074, "stars": [{"date_created": 1302618882.768434, "user_id": 1284}, {"date_created": 1302710707.9852691, "user_id": 20326}], "topic_id": 18890, "date_created": 1302615069.597805, "message": "Should I prefer (object)? What are the improvements?", "group_id": 292, "id": 642400}, {"user_id": 719, "stars": [{"date_created": 1302618884.7362239, "user_id": 1284}], "topic_id": 18890, "date_created": 1302615868.4329159, "message": "@Samuirai http://realmike.org/blog/2010/07/18/introduction-to-new-style-classes-in-python/", "group_id": 292, "id": 642714}, {"user_id": 719, "stars": [], "topic_id": 18890, "date_created": 1302615935.602145, "message": "There's also @raymondh's guide to descriptors: http://users.rcn.com/python/download/Descriptor.htm", "group_id": 292, "id": 642730}, {"user_id": 1736, "stars": [{"date_created": 1302710713.4410391, "user_id": 20326}], "topic_id": 18890, "date_created": 1302630847.9111371, "message": "The short version, inheriting from object in Python 2.x is just a flag for wanting the new, nicer object model", "group_id": 292, "id": 646701}, {"user_id": 1736, "stars": [{"date_created": 1302710715.7397859, "user_id": 20326}], "topic_id": 18890, "date_created": 1302630866.145771, "message": "This is gone in Python 3.x though, the old object model was removed entirely", "group_id": 292, "id": 646709}, {"user_id": 1736, "stars": [{"date_created": 1302631109.357641, "user_id": 1284}, {"date_created": 1302631368.872354, "user_id": 1}, {"date_created": 1302659823.656898, "user_id": 5778}, {"date_created": 1302710718.9520259, "user_id": 20326}], "topic_id": 18890, "date_created": 1302630885.929606, "message": "So in Python 2.x you should always inherit from object", "group_id": 292, "id": 646723}, {"user_id": 3354, "stars": [], "topic_id": 18890, "date_created": 1302662716.395921, "message": "The easiest way to do so being to add\n\n__metaclass__ = type", "group_id": 292, "id": 655618}, {"user_id": 3354, "stars": [], "topic_id": 18890, "date_created": 1302662725.4009769, "message": "to the start of your module.", "group_id": 292, "id": 655625}]