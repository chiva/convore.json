[{"user_id": 1915, "stars": [{"date_created": 1297695942.192893, "user_id": 7179}, {"date_created": 1298015051.16502, "user_id": 2482}, {"date_created": 1299531858.4036629, "user_id": 19406}, {"date_created": 1299880002.372551, "user_id": 12963}], "topic_id": 4996, "date_created": 1297635498.030534, "message": "Django has much better documentation. With Rails you have an API ( which means that you are doomed if you don't know what you are looking for ) and books ( and they are not free ).On a language level if you compare Ruby and Python - Ruby has all these amazing incompatibility issues. For example you have a gem that requires rack 1.0.1 and you want to install Rails 3, which requires rack 1.1.0 - you either wait for the\ngem developer to release a new compatible version or start 'hacking' the source code. If you have 2 or more gems like that - you can win several days 'hacking' :)", "group_id": 292, "id": 94191}, {"user_id": 8728, "stars": [{"date_created": 1297649203.086211, "user_id": 8013}, {"date_created": 1299939521.0732169, "user_id": 16719}], "topic_id": 4996, "date_created": 1297637014.8208361, "message": "I think the classic Django vs. Rails idiom is \"Simplicity vs. Convention\". Django is not complex to use and it's pretty powerful. Rails is a bit more complex, but you can follow its conventions and get a lot of neat stuff for free as a result.", "group_id": 292, "id": 94314}, {"user_id": 9013, "stars": [], "topic_id": 4996, "date_created": 1297635815.663038, "message": "I know Python/Django but plan to learn Ruby/RoR some time in the future. Why exactly are version incompatibilities more of a problem in Ruby than Python?", "group_id": 292, "id": 94235}, {"user_id": 1915, "stars": [], "topic_id": 4996, "date_created": 1297636652.747725, "message": "I am not sure why, maybe it's part of the Ruby culture, for example Cucumber ( very popular gem ) has 13 dependencies, the Python version - Lettuce has 0", "group_id": 292, "id": 94306}, {"user_id": 4156, "stars": [], "topic_id": 4996, "date_created": 1297637974.3212609, "message": "Vs Rails which is a nightmare for maintenance coders coming onto a pre-existing project (especially somebody new to Rails itself)", "group_id": 292, "id": 94408}, {"user_id": 4156, "stars": [], "topic_id": 4996, "date_created": 1297638053.9634919, "message": "(but I've not done any real Rails 3 so can't say for sure)", "group_id": 292, "id": 94411}, {"user_id": 1915, "stars": [], "topic_id": 4996, "date_created": 1297637249.6977329, "message": "Another example, this is the last one, I promise. You install Rails 3 and you want to use Mongoid instead of ActiveRecord. You run the magic command 'gem install rails' ( the latest version is 3.0.4 ) and after that you try to install Mongoid, the latest version depends on ActiveSupport < 3.0.0, it gives you a very nice error message and the 'hacking' begins :)", "group_id": 292, "id": 94324}, {"user_id": 4156, "stars": [], "topic_id": 4996, "date_created": 1297637781.088882, "message": "@martin_rusev As you implied, I think that is more a side effect of Rubyists being more likely to leverage third-party gems, vs Pythonistas who often seem to feel depending solely on stdlib is the ideal", "group_id": 292, "id": 94386}, {"user_id": 4156, "stars": [], "topic_id": 4996, "date_created": 1297638045.397357, "message": "I think Rails 3 may be better for this since it does a lot more splitting things up and encouraging mix-and-match -- thus it's more likely to see a Python-like stack of require statements instead of relying solely on the Rails loader", "group_id": 292, "id": 94410}, {"user_id": 4156, "stars": [], "topic_id": 4996, "date_created": 1297637860.347034, "message": "That's obviously a huge generalization but I think it's at least partly accurate and would explain why one might run into dependency problems more often in Ruby", "group_id": 292, "id": 94399}, {"user_id": 4156, "stars": [{"date_created": 1298015258.1210909, "user_id": 2482}], "topic_id": 4996, "date_created": 1297637930.17626, "message": "More on topic -- Django being Pythonic helps a lot, I think -- you can, armed with the docs and somebody's project, figure out where everything comes from pretty easily, due to Python's explicit imports.", "group_id": 292, "id": 94407}, {"user_id": 209, "stars": [], "topic_id": 4996, "date_created": 1297745459.597445, "message": "@ved_antani Several others as well", "group_id": 292, "id": 109299}, {"user_id": 209, "stars": [{"date_created": 1297745586.856092, "user_id": 8539}, {"date_created": 1297794837.5747311, "user_id": 6544}], "topic_id": 4996, "date_created": 1297745426.6415219, "message": "@ved_antani Django hosting is getting really good.  Keep an eye on ep.io and gondor.io", "group_id": 292, "id": 109296}, {"user_id": 8539, "stars": [], "topic_id": 4996, "date_created": 1297745275.196646, "message": "(Slightly off topic) - Rails has superb (free) hosting at Heroku. I am not sure such an option exists for Django. If it exists, I would surely move to Django today...", "group_id": 292, "id": 109291}, {"user_id": 1081, "stars": [{"date_created": 1297745583.712209, "user_id": 8539}, {"date_created": 1297794404.6405201, "user_id": 8013}, {"date_created": 1297800547.231679, "user_id": 8391}, {"date_created": 1298015372.757535, "user_id": 2482}], "topic_id": 4996, "date_created": 1297745422.6097691, "message": "@ved_antani ep.io ... awesome and completely free for now", "group_id": 292, "id": 109295}, {"user_id": 5639, "stars": [{"date_created": 1297799234.990746, "user_id": 141}], "topic_id": 4996, "date_created": 1297796448.283304, "message": "I think if you're in a position to ask this question, it probably doesn't matter. Rails users seem every bit as happy to me as Django users. If you find the surrounding culture/community around one more appealing than the other, choose that one and go with it. Chances are if you start with Rails you'll be as happy as anyone else using it, and likewise for Django. I'm really just not sure on a technical level that there's a real difference that would represent a showstopper, short of not knowing one language or the other.", "group_id": 292, "id": 113745}, {"user_id": 8013, "stars": [{"date_created": 1297795688.243592, "user_id": 1081}], "topic_id": 4996, "date_created": 1297795652.7700689, "message": "n.b. that is WSGI application hosting, not just Django", "group_id": 292, "id": 113578}, {"user_id": 3946, "stars": [{"date_created": 1297843496.164077, "user_id": 4893}, {"date_created": 1297866678.4730489, "user_id": 7512}, {"date_created": 1297867619.525461, "user_id": 4156}, {"date_created": 1297983106.913173, "user_id": 8917}, {"date_created": 1297993006.272615, "user_id": 6415}, {"date_created": 1298015477.1294911, "user_id": 2482}, {"date_created": 1298100512.8636351, "user_id": 5778}, {"date_created": 1298292368.2283721, "user_id": 7179}, {"date_created": 1298377187.165709, "user_id": 2887}, {"date_created": 1299939575.50051, "user_id": 16719}], "topic_id": 4996, "date_created": 1297832351.4498479, "message": "Learning Django will teach you python, learning Rails will teach you ActiveSupport.", "group_id": 292, "id": 117700}, {"user_id": 13386, "stars": [], "topic_id": 4996, "date_created": 1297982993.459949, "message": "@sshirokov Hahaha. Very true", "group_id": 292, "id": 137463}, {"user_id": 2559, "stars": [], "topic_id": 4996, "date_created": 1297989061.671592, "message": "@martin_rusev 'gem install mongoid --pre'  (See the mongoid.org homepage, 2nd column).  No hacking involved.", "group_id": 292, "id": 138273}, {"user_id": 12347, "stars": [{"date_created": 1297994113.91063, "user_id": 1081}, {"date_created": 1298454509.6017759, "user_id": 15162}], "topic_id": 4996, "date_created": 1297994025.4620979, "message": "@raisel I would like ep.io more if I would finally get my invite", "group_id": 292, "id": 138892}, {"user_id": 3952, "stars": [], "topic_id": 4996, "date_created": 1297996379.037266, "message": "I've done both Rails and Django work. I'd agree with @jonesy that it probably doesn't really matter. I'd also like to add that Rails documentation isn't nearly as bad as it was back in 2007. As of Rails 3, I'd actually say it's pretty good (and there are plenty of free sources too)", "group_id": 292, "id": 139145}, {"user_id": 2482, "stars": [], "topic_id": 4996, "date_created": 1298015488.5790069, "message": "@sshirokov That's a perfect summary.", "group_id": 292, "id": 140328}, {"user_id": 1955, "stars": [{"date_created": 1303293420.2613411, "user_id": 4546}], "topic_id": 4996, "date_created": 1298038383.8808091, "message": "Use Django when you want to write Python code. Simple :]", "group_id": 292, "id": 142956}, {"user_id": 13733, "stars": [], "topic_id": 4996, "date_created": 1298081459.101234, "message": "if google trends is any indication, django is a safer bet than rails for futureproofing your knowledge", "group_id": 292, "id": 148346}, {"user_id": 3617, "stars": [], "topic_id": 4996, "date_created": 1298266928.4272101, "message": "Neither. Pick a language and learn it, then you're futureproof. Of course I'm a python fanboy. >.> Pyramid is my system of choice however.", "group_id": 292, "id": 156789}, {"user_id": 9787, "stars": [], "topic_id": 4996, "date_created": 1298282824.8228719, "message": "Rails was a tad chaotic with ruby 1.9.x and Rails 3 - it took a while for most popular gems to upgrade to work with either, but it's currently in a relatively comfy state. In fact, I'd still state gems (which can essentially have an entire Rails application in it too, as an engine) are the single thing I love most about ruby/rails, despite all the shortcomings/problems.", "group_id": 292, "id": 157525}, {"user_id": 3748, "stars": [{"date_created": 1298312404.2869239, "user_id": 261}, {"date_created": 1298355398.3370211, "user_id": 5582}, {"date_created": 1299616000.355011, "user_id": 19610}], "topic_id": 4996, "date_created": 1298297245.3323441, "message": "Why not talk about what is better in rails than django.  That way django developers can improve or add features.", "group_id": 292, "id": 158764}, {"user_id": 13642, "stars": [{"date_created": 1298355405.6710551, "user_id": 5582}], "topic_id": 4996, "date_created": 1298309868.6115229, "message": "@jdaguilera that's definitely a great aspect of django & its community, the constant desire to improve django regardless of where the inspiration comes from.", "group_id": 292, "id": 160220}, {"user_id": 4156, "stars": [], "topic_id": 4996, "date_created": 1298354471.3655679, "message": "@samn In their defense, recent Rails work (mostly in Rails 3) seems to have been influenced by Django as well, in ways both acknowledged (the CSRF/etc stuff IIRC) and just suspected (the far more modular approach taken to putting controllers/etc together via a bunch of requires, for example)", "group_id": 292, "id": 177349}, {"user_id": 5582, "stars": [], "topic_id": 4996, "date_created": 1298355486.0782161, "message": "Not much of an expert on neither, but I like how in Rails the ORM-part is de-coupled from the framework. Like, for instance you can easily switch ActiveResource for DataMapper.", "group_id": 292, "id": 177392}, {"user_id": 214, "stars": [], "topic_id": 4996, "date_created": 1298360367.413527, "message": "@0chris Not real familiar with Rails, but is it actually any more decoupled, or are people just more familiar with the idea of swapping ORMs? I mean, you can use any ORM you want in Django, you just lose some ORM-related helpers like ModelForms, generic views, and the admin. Does Rails actually have those same sorts of helpers built atop some kind of abstraction layer that lets it work with any underlying ORM?", "group_id": 292, "id": 177629}, {"user_id": 5582, "stars": [], "topic_id": 4996, "date_created": 1298360933.105835, "message": "@carljm While I'm an intermediate Django user, I'm only at the \"Hello blog\"-stage with Rails. I was just hoping to get the ball rolling on a conversation were more knowledgeable Rails-o-nauts would chime in. As far as I understand from the Rails 3.0 release notes (http://edgeguides.rubyonrails.org/3_0_release_notes.html#all-rails-core-components-are-decoupled , points 3.2 and 3.3), the ORM (ActiveRecord) is really decoupled from ActivePack (controller and view). So you really need to implement a given interface to provide your own ORM. See here http://yehudakatz.com/2010/01/10/activemodel-make-any-ruby-object-feel-like-activerecord/ (linked to from the release notes also).", "group_id": 292, "id": 177665}, {"user_id": 7364, "stars": [], "topic_id": 4996, "date_created": 1298368622.696101, "message": "Language aside, Django and Rails are quite different frameworks in some ways. Django has a much more CMS bent (admin app, auth, contenttypes etc)", "group_id": 292, "id": 178185}, {"user_id": 7364, "stars": [], "topic_id": 4996, "date_created": 1298368704.5228341, "message": "(superficially anyway)", "group_id": 292, "id": 178196}, {"user_id": 7364, "stars": [], "topic_id": 4996, "date_created": 1298368683.1797149, "message": "Rails 3 reminds me a lot more of Pyramid in the sense of decoupled components", "group_id": 292, "id": 178193}, {"user_id": 5582, "stars": [], "topic_id": 4996, "date_created": 1298371562.0096099, "message": "I agree that Pyramid might be more like Rails, I guess people tend to compare the frameworks with the largest community / traction.", "group_id": 292, "id": 178388}, {"user_id": 719, "stars": [], "topic_id": 4996, "date_created": 1298369754.1315019, "message": "Apart from Django's newspaper history, I've never felt the framework was CMS oriented. Is this a common perception?", "group_id": 292, "id": 178268}, {"user_id": 7364, "stars": [], "topic_id": 4996, "date_created": 1298369976.796947, "message": "I'm not saying Django's useful only for CMS-type apps, of course not, just that it has a lot of features that you tend to find more in a CMS than a framework", "group_id": 292, "id": 178274}, {"user_id": 14309, "stars": [], "topic_id": 4996, "date_created": 1298373965.715946, "message": "You get to code in Python :)", "group_id": 292, "id": 178537}, {"user_id": 7364, "stars": [], "topic_id": 4996, "date_created": 1298378349.9394529, "message": "At the end of the day, go with what you prefer. Success of a project is rarely affected by choice of framework.", "group_id": 292, "id": 178826}, {"user_id": 7364, "stars": [], "topic_id": 4996, "date_created": 1298378411.596524, "message": "A sufficiently competent team should also be able to choose the best tools for the job based on the project at hand.", "group_id": 292, "id": 178830}, {"user_id": 12688, "stars": [], "topic_id": 4996, "date_created": 1298380900.503067, "message": "I have done a bunch of Django work but now am using Rails at a new startup.  I *really* miss Django.  Why? #1 Django admin - nothing comes close in ruby land. #2: Rails separates the database components into migrations and models.  I suppose this is good for some things, but Django feels must more intuitive with the model \"owning\" the schema. I'd rather have to deal with django south for migrations and get all the relationships modelled correctly.  In rails it is quite easy to mix up your :has_manys and :belongs_to and generate bad SQL in ways that is just not possible in Django.  #3: I like the Django ORM better than activerecord.  Arel is OK but feels like it is just catching up to Django. #4 I don't like convention over code - I find it very frustrating that things can get screwed up because of case or pluralization.  The rails way is \"does your code have one of 10 methods? if so I will call it\".  Hard to debug or figure out what code is being used. #5: Django has excellent documentation and was built by perfectionists with deadlines.  It shows.   I guess some of this is just rants from someone who is struggling with new tools but I really like the Django / python mindset.", "group_id": 292, "id": 178924}, {"user_id": 12798, "stars": [], "topic_id": 4996, "date_created": 1298383157.2820549, "message": "There are a number of gems that provide functionality similar to the Django admin. I use admin_data myself - https://github.com/neerajdotname/admin_data", "group_id": 292, "id": 179091}, {"user_id": 12798, "stars": [{"date_created": 1303293716.6416061, "user_id": 4546}], "topic_id": 4996, "date_created": 1298383202.428299, "message": "Live demo of admin_data - http://admin-data-demo.heroku.com/admin_data/quick_search/website", "group_id": 292, "id": 179092}, {"user_id": 12416, "stars": [], "topic_id": 4996, "date_created": 1298384029.175014, "message": "Don't use either. Use Sinatra for Ruby and Webpy for Python.", "group_id": 292, "id": 179122}, {"user_id": 12404, "stars": [], "topic_id": 4996, "date_created": 1298384121.4204531, "message": "@davidhollander ok i will :) /blindlyfolow", "group_id": 292, "id": 179131}, {"user_id": 12416, "stars": [], "topic_id": 4996, "date_created": 1298384204.14749, "message": "In my experience the Django admin unfortunately is not good enough to hand off to client, they won't understand a program centric interface, they want a user centric interface fo managing content. And if you throw out the auto-generated admin in Django, there's not much point in using it, as other frameworks doing nearly everything else better ex. Webpy templates and forms, SQLAlchemy for an ORM (though using thin SQL wrapper like in webpy is still faster for anything decently complex IMO)", "group_id": 292, "id": 179138}, {"user_id": 3952, "stars": [], "topic_id": 4996, "date_created": 1298384306.461478, "message": "@harshaw that's kind of funny- I did Rails a bunch and switched to Django and really missed it for a myriad of reasons too. And we weren't able to use Django admin (like @davidhollander above) so things like that weren't helpful. All in all (a few years later), I really enjoy both. I think they each have their pros and cons, but I wouldn't refuse work in either.", "group_id": 292, "id": 179149}, {"user_id": 12416, "stars": [], "topic_id": 4996, "date_created": 1298384310.8852401, "message": "@tbatterii sorry thought enter would start a new line and not send", "group_id": 292, "id": 179150}, {"user_id": 12404, "stars": [], "topic_id": 4996, "date_created": 1298384366.0284729, "message": "@davidhollander it's cool. I was hoping you would expand on your answer... and you did :)", "group_id": 292, "id": 179156}, {"user_id": 12404, "stars": [], "topic_id": 4996, "date_created": 1298384600.386976, "message": "every time I've tried to use django or any \"full stack\" framework I hit brick walls unless the project hits the sweet spot for the frameworks intended use case. once that happened it seemed more effort to code around the framework decisions rather than writing it myself. had the same experience with asp.net, and drupal back in the day.", "group_id": 292, "id": 179172}, {"user_id": 3748, "stars": [], "topic_id": 4996, "date_created": 1298385717.2817559, "message": "@davidwparker can you tell us one of the things you miss from Rails when doing Django?", "group_id": 292, "id": 179305}, {"user_id": 7364, "stars": [], "topic_id": 4996, "date_created": 1298390971.7951601, "message": "@davidhollander: agreed. The problem is that often the developers don't have the freedom to choose the best tool for the job (which might be Django, or something else) because management decide by diktat what tools are to be used.", "group_id": 292, "id": 179972}, {"user_id": 13912, "stars": [], "topic_id": 4996, "date_created": 1298392806.1720469, "message": "yes, you can give a client the django admin. Although not without heavily customizing it in places - specifying your own versions of AdminSite and ModelAdmin and providing some of your own implementations of other undocumented internals there. We've sold two relatively large enterprise style applications that were just built on top of the admin. Sometimes it was just frustrating having to work around some of the stuff, but in the end the projects turned out on time (which was very short).", "group_id": 292, "id": 180138}, {"user_id": 214, "stars": [], "topic_id": 4996, "date_created": 1298391755.193727, "message": "Umm, I count six clients currently managing their sites happily via the Django admin. Direct quote from one of them: \"We love the admin!\" In part I'm sure it's \"sweet spot\" (a couple are news orgs), in part it's understanding how easy it actually is to customize the admin heavily. All of these projects were done on a budget that absolutely would have precluded building a custom admin interface. In any case, definitely not generally true that \"you can't give a client the admin.\"", "group_id": 292, "id": 180031}, {"user_id": 12688, "stars": [], "topic_id": 4996, "date_created": 1298397953.80246, "message": "I agree that some parts of the Django admin are tricky - but it feels like it is worth it to me.  One of my favorite admin features is that you can create URLs into the django admin (as a virtual column) that do some really cool queries.  For example, you could add a synthetic link from your cars page that performs a query, e.g; /admin/cars/?car__type__eq=minivan&engine=v8&car__radio__manufacturer=bose", "group_id": 292, "id": 180897}, {"user_id": 2362, "stars": [], "topic_id": 4996, "date_created": 1298472895.090452, "message": "It doesn't matter any more. Go with what whatever draws you for some silly, insignificant reason. They both can be made to do much of the same. In my case, I already knew Python, and liked the look of the language better. Nothing to do with Rails in my case.", "group_id": 292, "id": 187891}, {"user_id": 12510, "stars": [], "topic_id": 4996, "date_created": 1298518245.5168891, "message": "If you are doing something super trivial of course it doesn't matter. Just use Flask or hell roll your own. However if are interested in serious web development and deployment of course it matters.  Personally I use Django. However Django does not have anything like the services provided by http://newrelic.com/ and http://heroku.com. Though they are not part of the framework they are very useful and if they were offered for Django I would probably be using them. That is something to consider.", "group_id": 292, "id": 195018}, {"user_id": 1736, "stars": [], "topic_id": 4996, "date_created": 1298518999.7636681, "message": "@drcbarnardo There are several startups that provide those kinds of services, in fact most are pretty active on here :-)", "group_id": 292, "id": 195041}, {"user_id": 3748, "stars": [], "topic_id": 4996, "date_created": 1298527714.1581099, "message": "ep.io is an example of a heroku style \"paas\" for django ( or any wsgi framework ).", "group_id": 292, "id": 195709}, {"user_id": 15392, "stars": [], "topic_id": 4996, "date_created": 1298528751.6940019, "message": "Anyone tried Tornado templates over Django?", "group_id": 292, "id": 195765}, {"user_id": 12510, "stars": [], "topic_id": 4996, "date_created": 1298573034.0286219, "message": "@coderanger names or they don't exist :).", "group_id": 292, "id": 200197}, {"user_id": 1736, "stars": [], "topic_id": 4996, "date_created": 1298573515.828279, "message": "@drcbarnardo gondor.io, ep.io, djangy", "group_id": 292, "id": 200282}, {"user_id": 1736, "stars": [], "topic_id": 4996, "date_created": 1298573554.1325901, "message": "@drcbarnardo Those are the 3 I'm most familiar with, there are probably more. Also Google App Engine provides automated hosting if you are willing to drink their kool-aid.", "group_id": 292, "id": 200294}, {"user_id": 3952, "stars": [], "topic_id": 4996, "date_created": 1298837612.0974121, "message": "@jdaguilera The number one thing for me was testing frameworks. I really like rspec and cucumber. It just seemed to be one of those things that clicked easily. I never felt like BDD was a drag on the system whereas in Django I really struggled to do it regularly.", "group_id": 292, "id": 220369}, {"user_id": 6165, "stars": [], "topic_id": 4996, "date_created": 1299529437.1612439, "message": "Having used Django and now Rails 3, I can say from my personal perspective that I enjoy Django's models much more.  You don't even see the attributes of the model in Rails. Its in the migration only. Of course, there's a gem (annotate) to display the attributes of the model in the model.  The other I thing better in Django is the documentation.  A couple of things I like better in Rails is the testing.  Rspec is pretty awesome and seems to make testing natural.  The other thing I like better in the Rails world is Heroku.", "group_id": 292, "id": 290617}, {"user_id": 4156, "stars": [], "topic_id": 4996, "date_created": 1299531803.2300811, "message": "@JeffSelf Have you tried any of the fledgling Django heroku-a-likes? Though obviously Heroku has quite a head start in terms of maturity.", "group_id": 292, "id": 291151}, {"user_id": 4156, "stars": [], "topic_id": 4996, "date_created": 1299531847.277802, "message": "Otherwise, as a Django and Rails 1/2 user, you're spot on.", "group_id": 292, "id": 291160}, {"user_id": 1736, "stars": [], "topic_id": 4996, "date_created": 1299533616.266572, "message": "@JeffSelf Integrating unittest2 in Django 1.3 will hopefully make testing a little better, but it is still the same basic model", "group_id": 292, "id": 291587}, {"user_id": 2723, "stars": [], "topic_id": 4996, "date_created": 1299553964.8538499, "message": "You don't have to use Ruby. ;-)", "group_id": 292, "id": 293142}, {"user_id": 6165, "stars": [], "topic_id": 4996, "date_created": 1299587698.2509589, "message": "@bitprophet Not had the opportunity to try some yet.  Looking forward to seeing them though.", "group_id": 292, "id": 295679}, {"user_id": 8740, "stars": [{"date_created": 1299600551.2198169, "user_id": 4156}], "topic_id": 4996, "date_created": 1299589152.3176661, "message": "\"Fledgling\" is somewhat descriptive, indeed. I expect a few of us heroku-a-likes will start becoming more mature in a few months, though.", "group_id": 292, "id": 295756}, {"user_id": 18347, "stars": [], "topic_id": 4996, "date_created": 1299594261.1434519, "message": "unicorns", "group_id": 292, "id": 296255}, {"user_id": 13501, "stars": [], "topic_id": 4996, "date_created": 1299614215.177917, "message": "Well, for me I think rails feels better. I usually don't use Django when working in Python. Judging from testing, Rails is way ahead which have RSpec and the likes years ago and Django is still waiting for BDD spin", "group_id": 292, "id": 298952}, {"user_id": 16058, "stars": [], "topic_id": 4996, "date_created": 1299761544.3800001, "message": "@itsnotvalid, there's a lot of python BDD stuff. lettuce, pycukes, etc.", "group_id": 292, "id": 312954}, {"user_id": 4156, "stars": [], "topic_id": 4996, "date_created": 1299764952.127732, "message": "I have yet to personally evaluate lettuce/pycukes/etc, though, and plan to at some point.", "group_id": 292, "id": 313319}, {"user_id": 4156, "stars": [], "topic_id": 4996, "date_created": 1299764866.3694041, "message": "@myfreeweb But are any of them any good? Most people I know who've tried them said they're pretty subpar, especially compared to the Ruby inspirations.", "group_id": 292, "id": 313310}, {"user_id": 4156, "stars": [{"date_created": 1299923353.934222, "user_id": 141}], "topic_id": 4996, "date_created": 1299764931.8163159, "message": "In other words, \"there's a library for X\" is only a solution if said library doesn't suck ;) It's difficult to get people onto a platform/way of thinking if the tools for it aren't up to snuff.", "group_id": 292, "id": 313316}, {"user_id": 2045, "stars": [{"date_created": 1299879993.1338589, "user_id": 12963}], "topic_id": 4996, "date_created": 1299776969.6284859, "message": "You can do BDD with any test framework. It just seems that the Python/Django community doesn't emphasize DSLs, which could be the reason for lack of adoption or perceived quality of these libraries.", "group_id": 292, "id": 314895}, {"user_id": 4156, "stars": [{"date_created": 1299784939.68308, "user_id": 2588}, {"date_created": 1299787169.7812409, "user_id": 5778}], "topic_id": 4996, "date_created": 1299778082.3348169, "message": "@joshbohde Part of that is the language itself, Ruby lends itself much more to internal DSLs than Python does, mostly re: optional parentheses and anonymous code blocks", "group_id": 292, "id": 315047}, {"user_id": 2045, "stars": [], "topic_id": 4996, "date_created": 1299779581.3956521, "message": "@bitprophet Python is still capable of providing simple DSL, like twill, and some serious magic, like the with hacks, but it these seem to go against the Zen of Python. Anything beyond declarative metaclasses seem to be a bit too magical for the community.", "group_id": 292, "id": 315240}, {"user_id": 4156, "stars": [], "topic_id": 4996, "date_created": 1299784542.6207819, "message": "@joshbohde Right, it's not like Python cannot do *any* DSLs, but the kinds I see people leveraging for easy to read/write BDD don't work well in Python, or are not Pythonic to implement.", "group_id": 292, "id": 315638}, {"user_id": 2588, "stars": [], "topic_id": 4996, "date_created": 1299785827.6006019, "message": "The technolust side of me envies Ruby's DSL-friendly facilities. I wonder if people have bad experiences if their first exposure to a language is through a DSL. In defense of Python I like that it sort of forces everyone's attention on bringing new capabilities into the language itself.", "group_id": 292, "id": 315713}, {"user_id": 13501, "stars": [], "topic_id": 4996, "date_created": 1299807573.3324189, "message": "@myfreeweb  @bitprophet exactly. When we menthion RSpec we are saying it is one of the best solutions (and officially supported by Rails) and I don't see such blessing in Django (of course django also have other officially supported testing tool, and itself is also tested very well)", "group_id": 292, "id": 318496}, {"user_id": 13501, "stars": [], "topic_id": 4996, "date_created": 1299807888.7122829, "message": "@bitprophet IMHO Ruby's much more of a metaprogramming language than Python currently capable of, without taking out a whole bit of parsing (any language could do DSL given enough mangling in parsing, but that won't be of any good)\nthe closest thing would be decorators but they can't be nested like ruby's blocks (if I am not correct plz tell me how to do @dec1(@dec2))", "group_id": 292, "id": 318576}, {"user_id": 13501, "stars": [], "topic_id": 4996, "date_created": 1299807999.5395401, "message": "and the word \"Pythonic\" is pretty subjective, just as before the appearance of Rails gang Ruby was not extensively used in the way currently is, and DSL-like blocks are not very common before that too, where YAML was favored by most projects", "group_id": 292, "id": 318595}, {"user_id": 16058, "stars": [], "topic_id": 4996, "date_created": 1299915040.3314879, "message": "@itsnotvalid, well, Rails uses YAML :-)", "group_id": 292, "id": 330726}, {"user_id": 13501, "stars": [], "topic_id": 4996, "date_created": 1299932396.9479799, "message": "@myfreeweb I am not sure if its appearance is as much as it was 6 years ago", "group_id": 292, "id": 331424}, {"user_id": 18985, "stars": [{"date_created": 1299947209.337647, "user_id": 927}, {"date_created": 1300071319.091475, "user_id": 13501}], "topic_id": 4996, "date_created": 1299939426.2910271, "message": "@itsnotvalid you can stack decorators: http://bit.ly/OH61E - also, the closest thing to blocks is not decorators, but the 'with' statement: http://bit.ly/9ln08Q which you can do some very cool stuff with: https://github.com/rfk/withhacks", "group_id": 292, "id": 331874}, {"user_id": 12404, "stars": [], "topic_id": 4996, "date_created": 1299942185.746278, "message": "@bhu1st until now I hadn't seen those. it would be nice if frameworks could get off apples nuts and invent some new propaganda format. I kind of like these. http://www.youtube.com/watch?v=5GpOfwbFRcs", "group_id": 292, "id": 332465}, {"user_id": 16719, "stars": [], "topic_id": 4996, "date_created": 1299939985.8604851, "message": "anyone watched this http://bit.ly/gTTlrB  (youtube) ? what do you think of this kind of videos from rails geeks ..?", "group_id": 292, "id": 332002}, {"user_id": 13501, "stars": [], "topic_id": 4996, "date_created": 1300071306.7925949, "message": "@lost_theorem thanks, i'd look into that", "group_id": 292, "id": 344701}, {"user_id": 1629, "stars": [], "topic_id": 4996, "date_created": 1300080961.551461, "message": "@issackelly Thanks, I've been trying to find the link to gondo.io for a while.", "group_id": 292, "id": 345151}, {"user_id": 44071, "stars": [], "topic_id": 4996, "date_created": 1323024119.7485509, "message": "as a set of Cucumber&RSpec alternative there's a set of packages: yeti, nose-of-yeti, should-dsl for replacing rspec, and the package named freshen as a replacement of cucumber.", "group_id": 292, "id": 2698568}, {"user_id": 18845, "stars": [], "topic_id": 4996, "date_created": 1323101233.560106, "message": "Python is better for science.  NumPy, SciPy, they rock.  I have used Python at NASA, and now for biotech.", "group_id": 292, "id": 2704889}]