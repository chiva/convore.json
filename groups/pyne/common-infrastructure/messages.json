[{"user_id": 30471, "stars": [], "topic_id": 20801, "date_created": 1303444246.031518, "message": "What sort of functionality should be provided at the package level as a standard? Or what other infrastructure should be standard as an input/output form? For example, numpy has one \"array\" class, not one \"1D array\", \"matrix\", etc. with classes to convert them, and scipy uses numpy arrays everywhere.", "group_id": 9127, "id": 778625}, {"user_id": 30469, "stars": [], "topic_id": 20801, "date_created": 1303485924.1309929, "message": "We'll definitely want to agree on shared infrastructure for cross-sections, that's for sure. Ideally, you should be able to use the same set of multigroup cross-sections in any one of the solvers. That is what has been done with DRAGON, for example, for those who are familiar- they have a \"draglib\" which can be used for any one of various solvers.", "group_id": 9127, "id": 782101}, {"user_id": 30469, "stars": [], "topic_id": 20801, "date_created": 1303485994.106256, "message": "It was mentioned before, but I can see how a common class for something like an Isotope or a Material would be useful. I know that I personally have written an Isotope class numerous times and I'm sure some of you have as well.", "group_id": 9127, "id": 782109}, {"user_id": 30471, "stars": [], "topic_id": 20801, "date_created": 1303944795.5481579, "message": "I agree with @ntouran.", "group_id": 9127, "id": 833749}, {"user_id": 31414, "stars": [{"date_created": 1303944902.7329199, "user_id": 10411}], "topic_id": 20801, "date_created": 1303944462.095834, "message": "First of all, can we PLEASE call them Nuclides instead of Isotopes? Technically, the maximum number of isotopes is like 20, somewhere in the middle of the chart of the nuclides. I think Nuclide and Material are very fundamental. Materials would be something like Steel or Fuel or Coolant and would be made of Nuclides. Then, we need to implement the Composite Design Pattern to allow arbitrary nesting of materials. These Composite objects would be made of either materials or of other Composites. This arbitrary nesting should allow users to build heterogeneous pins or homogeneous blocks that can be build into assemblies and then reactors and then fleets of reactors. The hard part will be adding geometry to these Composites. Then, any solver can come along, read the composite, throw down a mesh, and solve.", "group_id": 9127, "id": 833691}, {"user_id": 30469, "stars": [], "topic_id": 20801, "date_created": 1303961201.5844679, "message": "Nuclide/isotope, potato/potahto!\n\nJust kidding, you're absolutely right @ntouran - they are Nuclides, not Isotopes. Thanks for keeping me honest.", "group_id": 9127, "id": 835936}]