[{"user_id": 13524, "stars": [], "topic_id": 16482, "date_created": 1301577282.3666329, "message": "The blog post I'm aiming to use is http://www.micahcarrick.com/django-email-authentication.html", "group_id": 81, "id": 491521}, {"user_id": 13524, "stars": [], "topic_id": 16482, "date_created": 1301577144.8734009, "message": "This is a classic one, I'd like to use contrib.auth, but the app I'm doing requires email / password as authentication. I've found loads of snippets, blogs, etc. on how to do this. Is there an app for this or which approach would you recommend?", "group_id": 81, "id": 491505}, {"user_id": 22109, "stars": [], "topic_id": 16482, "date_created": 1301580124.149699, "message": "@gudmundur The only problem I can find in that link is that the custom backend extends from object instead of ModelBackend (which isn't a problem if you enable both backends in your settings file). Overall, that article covers everything I can think of.", "group_id": 81, "id": 492049}, {"user_id": 1963, "stars": [], "topic_id": 16482, "date_created": 1301581513.5222239, "message": "We just use the username field to store email addresses, but use some custom sql to alter the username field to accept longer values.", "group_id": 81, "id": 492323}, {"user_id": 4077, "stars": [], "topic_id": 16482, "date_created": 1301578377.864758, "message": "I recently used 'django-email-auth' in a project, and found it easy to get up and running by basically just plugging it in.", "group_id": 81, "id": 491692}, {"user_id": 4077, "stars": [], "topic_id": 16482, "date_created": 1301578476.1141059, "message": "Basically, it creates a 'stub' ID in django.contrib.auth.Users that looks like \"1_barry.melton@gmail.com\" as the username, so that's a little weird, but it's certainly very usable.  It doesn't replace django auth, it just supplements it so you don't have to change anything in your app", "group_id": 81, "id": 491709}, {"user_id": 738, "stars": [], "topic_id": 16482, "date_created": 1301618292.987689, "message": "@gudmundar we basically use email or username for authentication, use a custom auth form that excepts 75 chars(email len) as the username, and validates as email address first or failing that, username. Most relevant pieces of this here https://gist.github.com/897544 , I assume this is pretty standard.", "group_id": 81, "id": 497990}, {"user_id": 738, "stars": [], "topic_id": 16482, "date_created": 1301618368.684078, "message": "@gudmundar the benefit of this approach is that your it doesn't mess with your your auth.user model or put anything weird in your username field or anything.", "group_id": 81, "id": 498002}, {"user_id": 11405, "stars": [], "topic_id": 16482, "date_created": 1301638997.7557099, "message": "i recently used this in a project and I'm happy with it: http://djangosnippets.org/snippets/74/ When a user creates an account, just make sure that the email he entered is saved in the username as well as in the email field.", "group_id": 81, "id": 499781}]