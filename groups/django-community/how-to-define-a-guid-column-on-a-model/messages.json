[{"user_id": 5582, "stars": [], "topic_id": 10353, "date_created": 1299137167.2485039, "message": "django-extensions has a UUIDField: https://github.com/django-extensions/django-extensions/blob/master/django_extensions/db/fields/__init__.py#L189", "group_id": 81, "id": 258768}, {"user_id": 7381, "stars": [{"date_created": 1299149341.6964691, "user_id": 6415}], "topic_id": 10353, "date_created": 1299149091.8534729, "message": "Another UUIDField implementation: https://github.com/dcramer/django-uuidfield", "group_id": 81, "id": 259491}, {"user_id": 4219, "stars": [], "topic_id": 10353, "date_created": 1299166959.8088131, "message": "shouldn't this be built in?", "group_id": 81, "id": 260815}, {"user_id": 1736, "stars": [], "topic_id": 10353, "date_created": 1299174337.132617, "message": "@convy Does it matter?", "group_id": 81, "id": 261798}, {"user_id": 17897, "stars": [], "topic_id": 10353, "date_created": 1299186490.8891699, "message": "@convy there is a ticket in Djangos trac which was closed as wontfix around 3 years ago. http://code.djangoproject.com/ticket/4682 including some reasoning of why not to include it.", "group_id": 81, "id": 263668}, {"user_id": 4219, "stars": [], "topic_id": 10353, "date_created": 1299185819.5705509, "message": "well its always better for things to be apart of core, for stability reasons yes.  I just think its a datatype that is so common it shouldn't be an extension (unless django-extension is maintained by the core developers)", "group_id": 81, "id": 263568}, {"user_id": 1736, "stars": [], "topic_id": 10353, "date_created": 1299190789.1596889, "message": "@convy I'm not sure what stability has to do with it. If you look at the code for UUIDField you will see that it is quite small, in fact the majority is just automated handling for every UUID type that Python supports. If you are worried about \"stability\" just pull the bits you need into your project directly and never look at them again (or write it from scratch, it won't take long if you only want v4).", "group_id": 81, "id": 264595}, {"user_id": 4219, "stars": [], "topic_id": 10353, "date_created": 1299525169.7397971, "message": "btw, if I was to drop id's and have all models use a UUID (guid) as it's PK, could this be done at the global level somehow?  will this effect ORM fetches i.e. I will have to be explicit and say fetch by column that is UUID?", "group_id": 81, "id": 289820}, {"user_id": 4219, "stars": [], "topic_id": 10353, "date_created": 1299525104.723861, "message": "@coderanger thanks for the tip.", "group_id": 81, "id": 289815}, {"user_id": 1736, "stars": [], "topic_id": 10353, "date_created": 1299525261.778362, "message": "And yes, the ORM will understand that but it makes integration with some external stuff harder (notably GenericForeignKey)", "group_id": 81, "id": 289830}, {"user_id": 1736, "stars": [], "topic_id": 10353, "date_created": 1299525217.4944019, "message": "@convy You could make an abstract model (class Meta: abstract=True) that defines id as a UUID column and then inherit from that in your app", "group_id": 81, "id": 289827}]