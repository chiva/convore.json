[{"user_id": 34349, "stars": [{"date_created": 1324565666.9660089, "user_id": 40805}], "topic_id": 48857, "date_created": 1324399672.050401, "message": "I have the following query:\n\nUserProfile.objects.filter(user=2).values('twitter_token', 'facebook_token')\n\n\"user\" field is ForeignKey to django.contrib.auth.models.User model.\n\nquery behind it:\n\n[{'time': '0.000', 'sql': u'SELECT `users_userprofile`.`twitter_token`, `users_userprofile`.`facebook_token` FROM `users_userprofile` WHERE `users_userprofile`.`user_id` = 2 '}]\n\nQuery is executed in no time. But the problem is that sql query is generated in ~ 0,3 - 0,5 sec which is kinda problem (for me at least)\n\nI've solved it with following query which is generated in 0.0 sec but looks not that \"sexy\" and exposes some sql outside:\n\nUserProfile.objects.extra(where=['user_id = 2']).only('twitter_token', 'facebook_token').all()\n\nany ideas how to make this better?", "group_id": 81, "id": 2744925}, {"user_id": 41146, "stars": [], "topic_id": 48857, "date_created": 1324450720.9209471, "message": "Also interested.", "group_id": 81, "id": 2745110}, {"user_id": 9896, "stars": [], "topic_id": 48857, "date_created": 1324472448.170017, "message": "you could try to .filter(user_id=2), may be faster", "group_id": 81, "id": 2745209}, {"user_id": 5436, "stars": [], "topic_id": 48857, "date_created": 1324486584.3169169, "message": " I find it very hard to believe it takes 500 milliseconds to generate a SQL string in python. If so, it might something else such a first-time registration of foreignkey classes or something.", "group_id": 81, "id": 2745368}, {"user_id": 35918, "stars": [], "topic_id": 48857, "date_created": 1324534035.5573931, "message": "if you test @ojiidotch 's suggestion, can you test how it compares to .filter(user__id__exact=2)", "group_id": 81, "id": 2745606}, {"user_id": 34349, "stars": [], "topic_id": 48857, "date_created": 1324546804.6281209, "message": "thanks for answers, but still it's the results are pretty the same. I've checked django code and  most of the time is spend in \"setup_joins\" function of django.db.models.sql module (line 1214). I had no time to dig deeper into, but it does some hardcore stuff :). Also there seems no way to get around this function, so I decided to stick with .extra() call which seems to perform a way better.", "group_id": 81, "id": 2745643}, {"user_id": 23244, "stars": [], "topic_id": 48857, "date_created": 1324689600.521842, "message": "Remember that when using extra(), it's your responsibility to check for SQL injection attacks if you use user input in the query!", "group_id": 81, "id": 2746249}, {"user_id": 34349, "stars": [], "topic_id": 48857, "date_created": 1324905709.0933161, "message": "sure, thanks for reminder.", "group_id": 81, "id": 2747056}]