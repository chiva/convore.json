[{"user_id": 35994, "stars": [], "topic_id": 40390, "date_created": 1308977576.0193529, "message": "I know that since Django 1.2 there has been support for multiple databases. I am just wandering what most people are doing as standard practice. Are people separating the user login registration from the rest and keeping two databases for that? Or when it is appropriate to use multiple databases and when is it not? I know that the middleware handles figuring out which database to use as long as you set it up right but does using multliple databases slow things down? Ok lots of thoughts.......comments?", "group_id": 81, "id": 1482830}, {"user_id": 11592, "stars": [], "topic_id": 40390, "date_created": 1308982517.6512029, "message": "I use it to peek into legacy database while keeping my own stuff like sessions in separate storage.", "group_id": 81, "id": 1483038}, {"user_id": 1736, "stars": [{"date_created": 1309032050.2955811, "user_id": 5778}], "topic_id": 40390, "date_created": 1308999670.3949029, "message": "It is great for interfacing with external apps like vBulletin or Druapl", "group_id": 81, "id": 1483589}, {"user_id": 1126, "stars": [], "topic_id": 40390, "date_created": 1309007229.049614, "message": "@desmondkaplan what you're describing is called vertical partitioning, and it's very hard to get right unless you know what you're doing", "group_id": 81, "id": 1483925}, {"user_id": 1126, "stars": [], "topic_id": 40390, "date_created": 1309007263.9229791, "message": "since you essentially lose any ability to join between those two tables, you'd have to do it all in-memory in python or some other transitional layer", "group_id": 81, "id": 1483926}, {"user_id": 1126, "stars": [], "topic_id": 40390, "date_created": 1309008605.574528, "message": "other than legacy databases, I don't know of many who use django's built-in support for multiple databases over an external tool, like pgpool/slony for postgres, and just connect to that single server from django (until it gets to the point that you have to shard/partition, then you end up using a mixture of the two)", "group_id": 81, "id": 1483971}, {"user_id": 1736, "stars": [], "topic_id": 40390, "date_created": 1309029221.1830311, "message": "re: sharding, http://buyafuckingssd.com/ ;-)", "group_id": 81, "id": 1485290}, {"user_id": 5778, "stars": [], "topic_id": 40390, "date_created": 1309032187.7838969, "message": "I'm using them to interact with IP.Board in Django management tasks, as @coderanger described", "group_id": 81, "id": 1485476}, {"user_id": 22109, "stars": [], "topic_id": 40390, "date_created": 1309035412.776068, "message": "I've used it before to interface with legacy systems. I didn't bother with models for it, though. It's nice to have all of your connections set up in one place.", "group_id": 81, "id": 1485678}, {"user_id": 11592, "stars": [], "topic_id": 40390, "date_created": 1309069270.7002239, "message": "@pewpewarrows actually you can do joins (well.. almost) across databases.", "group_id": 81, "id": 1487541}, {"user_id": 1147, "stars": [{"date_created": 1309238782.607759, "user_id": 5778}], "topic_id": 40390, "date_created": 1309145360.956635, "message": "I use it to keep Sentry and other write only \"log\" type tables. Whenever I want to copy prod data, I really don't care to copy those huge tables locally. Segregating the data makes it easier to manage backups. The real data can be backed up more often than the log type data.", "group_id": 81, "id": 1492587}]