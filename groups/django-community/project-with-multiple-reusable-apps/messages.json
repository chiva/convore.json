[{"user_id": 28548, "stars": [], "topic_id": 39026, "date_created": 1307795678.7630019, "message": "I'm about to make some of the apps reusable. How do you cope with editing them? I mean I usually have a private and public repository on github. If I'd submodule them I'm thinking that it could be a mess to manage the code. The other option would be to put them on the PYTHONPATH and simply add to requirements. Which option do you use?", "group_id": 81, "id": 1369785}, {"user_id": 6648, "stars": [], "topic_id": 39026, "date_created": 1307798994.382045, "message": "pip install -e ../myreusableapp", "group_id": 81, "id": 1369889}, {"user_id": 6648, "stars": [], "topic_id": 39026, "date_created": 1307798786.522938, "message": "I use pip to install a local version of them. Some libs are from pypi, some I install from github using the -e option and a url (you can specify branches and/or specific tags/commits), and some (under current development) are installed with the pip -e option and a local dir.", "group_id": 81, "id": 1369879}, {"user_id": 6648, "stars": [], "topic_id": 39026, "date_created": 1307798830.1508729, "message": "myworkspace/myproject", "group_id": 81, "id": 1369883}, {"user_id": 6648, "stars": [], "topic_id": 39026, "date_created": 1307798826.9969029, "message": "When it's time to deploy and cut a build, I also tag all of the dependent apps with git tag -a", "group_id": 81, "id": 1369881}, {"user_id": 6648, "stars": [], "topic_id": 39026, "date_created": 1307798828.5913129, "message": "on the local filesystem I have a workspace directory that contains my project and all the apps. so...", "group_id": 81, "id": 1369882}, {"user_id": 6648, "stars": [], "topic_id": 39026, "date_created": 1307798991.344913, "message": "myworkspace/myreusableapp", "group_id": 81, "id": 1369888}, {"user_id": 5863, "stars": [{"date_created": 1307804114.3511529, "user_id": 34360}], "topic_id": 39026, "date_created": 1307801142.3712749, "message": "Also worth knowing about if you're actively working on the reusable apps is the develop option for the setup.py file. Just run setup.py develop in your virtualenv and you don't have to update the dependency every time you change it's code", "group_id": 81, "id": 1369972}, {"user_id": 28548, "stars": [], "topic_id": 39026, "date_created": 1307953477.2966399, "message": "After some discussions in the #django channel I think about using a following model: 4 requirements files, where proddeps.pip containing only production dependencies, production.pip loading proddeps.pip and project's reusable apps with given tag, devdeps.pip loadin prodeps.pip and some packages to help with development, and finally development.pip which is loading devdeps.pip and reusable packages from development branch. The usage depends on the needs. Production server uses the production.pip, developers first install via development.pip, but upgrades will depend on what are they working on,  frontend devs - will continue to use development.pip, but if one is working on reusable apps then devdeps.pip should be used. It makes a little mess if there is more apps, but at least it's a workable schedule", "group_id": 81, "id": 1378361}, {"user_id": 34431, "stars": [], "topic_id": 39026, "date_created": 1307993164.2724919, "message": "as a side question, back to which version of Django is it advisable to support? 1.0?", "group_id": 81, "id": 1383317}, {"user_id": 6894, "stars": [], "topic_id": 39026, "date_created": 1308118915.5801809, "message": "Supporting 1.1 or 1.2 is pretty safe. It's pretty hassle-free to upgrade django, so most sites seem to be on at least 1.1 nowdays. Also supporting < 1.1 is a real nightmare due to lack of ORM aggregation", "group_id": 81, "id": 1398297}]