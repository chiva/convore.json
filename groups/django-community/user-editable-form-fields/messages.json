[{"user_id": 12689, "stars": [], "topic_id": 45654, "date_created": 1316705039.3443429, "message": "I'm writing a small ticketing system for work, and want to know if anybody has seen some code examples for user modifiable form fields.", "group_id": 81, "id": 2189301}, {"user_id": 12689, "stars": [], "topic_id": 45654, "date_created": 1316705106.4190099, "message": "I'm writing a small ticketing system for work, and want to know if anybody has seen some code examples for user modifiable form fields.", "group_id": 81, "id": 2189319}, {"user_id": 12689, "stars": [], "topic_id": 45654, "date_created": 1316705243.373508, "message": "I would need the admins of the ticketing system to create new fields for users to enter information into. So I almost need a admin-modifiable model. Or some string of models that would allow some additional fields.", "group_id": 81, "id": 2189345}, {"user_id": 12689, "stars": [], "topic_id": 45654, "date_created": 1316705246.3710151, "message": "Any tips?", "group_id": 81, "id": 2189346}, {"user_id": 13325, "stars": [], "topic_id": 45654, "date_created": 1316708571.8408389, "message": "Two guesses. One, something like MongoDB where the model is always flexible. Two, using another key, value store in models. Some google searches bring up a few results. I have heard that if you're using Postgres that it can handle key, value stores with a plugin. (Or whatever it's called, I have no experience with Postgres)", "group_id": 81, "id": 2189763}, {"user_id": 12689, "stars": [], "topic_id": 45654, "date_created": 1317158353.4729941, "message": "Now I'm left curious about the best way to store addition fields in the DB, and how much of a killer it would be on performance to have to do tons of queries each time I display a form.", "group_id": 81, "id": 2227751}, {"user_id": 12689, "stars": [], "topic_id": 45654, "date_created": 1317158281.540153, "message": "Here's a good example of busting out the form aspect of additional fields: http://jacobian.org/writing/dynamic-form-generation/", "group_id": 81, "id": 2227748}, {"user_id": 1496, "stars": [], "topic_id": 45654, "date_created": 1317174374.1039109, "message": "you can just have a table of key / value pairs where each has a foreignkey back to the primary record, but that'll bog down fast with a lot of use.  a more sophisticated approach is to use EAV techniques as done with https://github.com/mvpdev/django-eav and even better is to use postgresql hstore datatype which should be pretty fast: https://github.com/jordanm/django-hstore", "group_id": 81, "id": 2229231}, {"user_id": 3304, "stars": [], "topic_id": 45654, "date_created": 1317188273.957881, "message": "django-helpdesk does this. You can see the code at https://github.com/rossp/django-helpdesk/tree/master/helpdesk - you'll want to look into models.py (Ticket is the top-level, then there are CustomField and a model to tie the two together) and views/public.py which shows how the form is rendered/built, shown to the user, and then values saved.", "group_id": 81, "id": 2230552}, {"user_id": 209, "stars": [], "topic_id": 45654, "date_created": 1317257372.937108, "message": "Django-forms-builder is a good implementation of this", "group_id": 81, "id": 2237436}]