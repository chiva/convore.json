[{"user_id": 21842, "stars": [], "topic_id": 13671, "date_created": 1300395658.5871799, "message": "Looking at adding in some versioned object functionality, so I'm just about to start playing around with some Gems.  So far I've come across papertrail, vestil versions, and acts_as_versioned.  My initial quick look has me a little concerned that none of them might fully meet my requirements.  It looks like papertrail and vestil versions both use a single table for tracking which would quickly bloat as I need to keep full audit logs and can't remove old versions from the table.", "group_id": 4606, "id": 377591}, {"user_id": 21842, "stars": [], "topic_id": 13671, "date_created": 1300414865.111917, "message": "Here's a stack overflow I created with some more details:", "group_id": 4606, "id": 379195}, {"user_id": 21842, "stars": [], "topic_id": 13671, "date_created": 1300414865.9138169, "message": "http://stackoverflow.com/questions/5346367/object-versioning-in-rails-like-papertrail-but-individual-tables", "group_id": 4606, "id": 379196}, {"user_id": 22052, "stars": [], "topic_id": 13671, "date_created": 1300417370.3023019, "message": "Out of random curiosity why do you need this? If the objects are being checked into version control shouldn't that keep the history? Is there some type of business requirement?", "group_id": 4606, "id": 379415}, {"user_id": 22052, "stars": [], "topic_id": 13671, "date_created": 1300458972.8801479, "message": "You can't run some type of \"clean up\" on the audit table every month or so and back the data up? Or is it not built into the gems?", "group_id": 4606, "id": 382405}, {"user_id": 21842, "stars": [], "topic_id": 13671, "date_created": 1300458735.127053, "message": "This is for versioning the data, not for the versioning the models.  Yes, it's a business requirement.", "group_id": 4606, "id": 382368}, {"user_id": 21842, "stars": [], "topic_id": 13671, "date_created": 1300460735.625416, "message": "Tough to say; depends on what your system was being used for.  How many models, how many instances, how often were they accessed, how many users, etc.", "group_id": 4606, "id": 382641}, {"user_id": 22052, "stars": [], "topic_id": 13671, "date_created": 1300461835.9310679, "message": "Hmmm, actually.. now that I think about it,  at ATCO we had a \"staging\" table for auditing if i'm not mistaken. So we actually banked all of the changes in 1 place, then updated our audit table at the end of the day. I'm not sure what the advantage was, but it made it so you couldn't see a days worth of audit.", "group_id": 4606, "id": 382752}, {"user_id": 22052, "stars": [], "topic_id": 13671, "date_created": 1300458944.03672, "message": "Ahhhh, sorry, misunderstood. Some type of audit then. \"Versioned object functionality\" threw me off :P Stop saying such high tech words!", "group_id": 4606, "id": 382402}, {"user_id": 21842, "stars": [], "topic_id": 13671, "date_created": 1300459594.1674199, "message": "More like \"When was this changed ever, and what did it look like before each change?\"", "group_id": 4606, "id": 382484}, {"user_id": 21842, "stars": [], "topic_id": 13671, "date_created": 1300459847.553139, "message": "Yeah, there's gem's that do basically that, but I need more power.  That wouldn't keep track of any of the change meta-data (who made the change, when did they make the change, etc.) or give you any functionality for traversing versions.  It also gets messy if your schema ever changes.", "group_id": 4606, "id": 382530}, {"user_id": 21842, "stars": [], "topic_id": 13671, "date_created": 1300459025.6691339, "message": "The gems could do it, but this isn't just archiving.  The users need to be able to audit and interact with the full history at any time.", "group_id": 4606, "id": 382413}, {"user_id": 22052, "stars": [], "topic_id": 13671, "date_created": 1300459553.598237, "message": "Ahhhhh, like \"When was this -insert object name- status changed last!?\"", "group_id": 4606, "id": 382481}, {"user_id": 22052, "stars": [], "topic_id": 13671, "date_created": 1300459758.3606639, "message": "The 1 table thing would bloat hard. What about just cloning the table, like table1 & table1_audit. Then in the update method of table1 just write out the update to the table. Quick and dirty. But I guess you're looking for a gem that's already smart enough to do all that.", "group_id": 4606, "id": 382520}, {"user_id": 22052, "stars": [], "topic_id": 13671, "date_created": 1300460645.8116889, "message": "The CRM system we use is 1 massive table but it can do a clean up every quarter or something. Even at ATCO we used a massive audit table. It was huge, but if indexed and cleaned out every quarter (or even month depending on how big the system was) it should be okay. If a massive corp like ATCO can use 1 table I wouldn't see why anyone else couldn't. Maybe it was all the awesome COBOL + DB2.", "group_id": 4606, "id": 382630}, {"user_id": 22052, "stars": [], "topic_id": 13671, "date_created": 1300461871.267612, "message": "However, when you DID pull from the table (which srsly had like a billion rows) it was split second.", "group_id": 4606, "id": 382754}, {"user_id": 21834, "stars": [], "topic_id": 13671, "date_created": 1300464385.987242, "message": "but if your wanting to answer queries like \"show me all changes between these dates\", and your created_at/updated_at are not indexed, that will be a slow query", "group_id": 4606, "id": 383133}, {"user_id": 21834, "stars": [], "topic_id": 13671, "date_created": 1300464351.2548211, "message": "If you're pulling from an indexed column, table size is not going to matter that much", "group_id": 4606, "id": 383130}, {"user_id": 21844, "stars": [], "topic_id": 13671, "date_created": 1300467081.662606, "message": "This sounds like a common enough requirement. So like revisions in a wiki? Man, there's gotta be a git-related gem for that :)", "group_id": 4606, "id": 383564}, {"user_id": 21814, "stars": [], "topic_id": 13671, "date_created": 1300466585.0006881, "message": "Can you modify/contribute to an existing gem to add the functionality you're looking for?", "group_id": 4606, "id": 383507}, {"user_id": 21842, "stars": [], "topic_id": 13671, "date_created": 1300834375.237113, "message": "I'm not sure what wiki's use; I think the best solution in their case would be a document-based db which store's the revisions in each document.", "group_id": 4606, "id": 412588}, {"user_id": 21842, "stars": [], "topic_id": 13671, "date_created": 1300834544.0917809, "message": "I'm going to take a look at vestal versions as it allows you to create a custom version class, which I'm hoping means I can assign a separate version table for each object.  It unfortunately lacks some of the functionality I'd like to see.  (In particular none of the gem's I've seen so far have an elegant solution for handling versioning of associations)", "group_id": 4606, "id": 412609}, {"user_id": 21842, "stars": [], "topic_id": 13671, "date_created": 1300834477.530493, "message": "I built a prototype using papertrail which works, but is going to run into the table bloat problem.  It's true that an indexed table should be able to fetch fairly fast, but I'd like to be able to put a high level history log on the show page of each versioned object so it would be getting a lot of hits.  Having one single table that is getting read *and* written to that frequently sure seems like it's going to have scaling issues.", "group_id": 4606, "id": 412601}, {"user_id": 21842, "stars": [], "topic_id": 13671, "date_created": 1300912163.2235041, "message": "So I've played around with vestal versions a bunch now, and I feel fairly confident that I could get the behavior I want by extending it.  I've got individual tables functional now via some small extensions to the gem, and I have some ideas about how to implement the rest of my desired functionality (association versioning being one of the big ones).  If anyone's interested my prototype's on github here: https://github.com/benzittlau/Spike-Base/tree/vestal-versions.  If I commit down this path I'll probably create a fork of the gem and see if I can get it pulled back in.  I'd still rather be using Papertrail, but a quick look through their source suggests that the single table design is fairly deeply embedded in their code.", "group_id": 4606, "id": 420409}, {"user_id": 21842, "stars": [], "topic_id": 13671, "date_created": 1301000441.3691139, "message": "I've decided to go with Papertrail as it's a more active project, so I forked the gem and added the ability for custom classes like there was in vestal versions so that I could use separate tables.  My forked gem is here:", "group_id": 4606, "id": 431107}, {"user_id": 21842, "stars": [], "topic_id": 13671, "date_created": 1301000443.1188729, "message": "https://github.com/benzittlau/paper_trail", "group_id": 4606, "id": 431108}, {"user_id": 21842, "stars": [], "topic_id": 13671, "date_created": 1301000456.271009, "message": "And I've put a pull request in to have it brought back into the main project", "group_id": 4606, "id": 431111}]